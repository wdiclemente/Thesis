%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: vbs_mjj.pdf
%%Creator: Adobe Acrobat 17.11.0
%%For: amwright
%%CreationDate: 2/6/2019, 12:09:48 PM
%%BoundingBox: 0 0 210 192
%%HiResBoundingBox: 0 0 209.3380 191.1933
%%CropBox: 0 0 209.3380 191.1933
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 434 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="Python PDF Library - http://pybrary.net/pyPdf/"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -191.193 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
7.62939e-6 0 mo
7.62939e-6 191.193 li
209.338 191.193 li
209.338 0 li
cp
clp
.37422 lw
0 lc
0 lj
3.8 ml
[] 0 dsh
true sadj
17.1094 160.681 mo
18.2695 160.681 li
205.679 160.681 mo
204.519 160.681 li
17.1094 156.34 mo
18.2695 156.34 li
205.679 156.34 mo
204.519 156.34 li
17.1094 152.672 mo
18.2695 152.672 li
205.679 152.672 mo
204.519 152.672 li
17.1094 149.491 mo
18.2695 149.491 li
205.679 149.491 mo
204.519 149.491 li
17.1094 146.685 mo
18.2695 146.685 li
205.679 146.685 mo
204.519 146.685 li
17.1094 144.178 mo
19.4672 144.178 li
205.679 144.178 mo
203.321 144.178 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.750179 .679652 .670192 .901488 cmyk
@
17.1094 127.674 mo
18.2695 127.674 li
205.679 127.674 mo
204.519 127.674 li
17.1094 118.019 mo
18.2695 118.019 li
205.679 118.019 mo
204.519 118.019 li
17.1094 111.171 mo
18.2695 111.171 li
205.679 111.171 mo
204.519 111.171 li
17.1094 105.857 mo
18.2695 105.857 li
205.679 105.857 mo
204.519 105.857 li
17.1094 101.516 mo
18.2695 101.516 li
205.679 101.516 mo
204.519 101.516 li
17.1094 97.8492 mo
18.2695 97.8492 li
205.679 97.8492 mo
204.519 97.8492 li
17.1094 94.6682 mo
18.2695 94.6682 li
205.679 94.6682 mo
204.519 94.6682 li
17.1094 91.8621 mo
18.2695 91.8621 li
205.679 91.8621 mo
204.519 91.8621 li
17.1094 89.3541 mo
19.4672 89.3541 li
205.679 89.3541 mo
203.321 89.3541 li
@
17.1094 72.8892 mo
18.2695 72.8892 li
205.679 72.8892 mo
204.519 72.8892 li
17.1094 63.2342 mo
18.2695 63.2342 li
205.679 63.2342 mo
204.519 63.2342 li
17.1094 56.3851 mo
18.2695 56.3851 li
205.679 56.3851 mo
204.519 56.3851 li
17.1094 51.0721 mo
18.2695 51.0721 li
205.679 51.0721 mo
204.519 51.0721 li
17.1094 46.7311 mo
18.2695 46.7311 li
205.679 46.7311 mo
204.519 46.7311 li
17.1094 43.0631 mo
18.2695 43.0631 li
205.679 43.0631 mo
204.519 43.0631 li
17.1094 39.8821 mo
18.2695 39.8821 li
205.679 39.8821 mo
204.519 39.8821 li
17.1094 37.0762 mo
18.2695 37.0762 li
205.679 37.0762 mo
204.519 37.0762 li
17.1094 34.5692 mo
19.4672 34.5692 li
205.679 34.5692 mo
203.321 34.5692 li
@
17.1094 18.0651 mo
18.2695 18.0651 li
205.679 18.0651 mo
204.519 18.0651 li
17.1094 8.41016 mo
18.2695 8.41016 li
205.679 8.41016 mo
204.519 8.41016 li
17.1094 1.56213 mo
18.2695 1.56213 li
205.679 1.56213 mo
204.519 1.56213 li
17.1094 163.188 mo
17.1094 160.83 li
17.1094 1.56213 mo
17.1094 3.92017 li
@
54.8312 163.188 mo
54.8312 160.83 li
54.8312 1.56213 mo
54.8312 3.92017 li
@
92.5522 163.188 mo
92.5522 160.83 li
92.5522 1.56213 mo
92.5522 3.92017 li
@
130.236 163.188 mo
130.236 160.83 li
130.236 1.56213 mo
130.236 3.92017 li
@
167.957 163.188 mo
167.957 160.83 li
167.957 1.56213 mo
167.957 3.92017 li
@
205.679 163.188 mo
205.679 160.83 li
205.679 1.56213 mo
205.679 3.92017 li
@
17.1094 1.56213 mo
17.1094 163.188 li
205.679 163.188 li
205.679 1.56213 li
17.1094 1.56213 li
cp
@
.56133 lw
54.5312 134.71 mo
74.8512 134.71 li
17.1094 163.188 mo
17.1094 82.3941 li
26.5402 82.3941 li
26.5402 60.3151 li
35.9702 60.3151 li
35.9702 57.7701 li
45.4002 57.7701 li
45.4002 59.1921 li
54.8312 59.1921 li
54.8312 61.6622 li
64.2612 61.6622 li
64.2612 64.5441 li
73.6912 64.5441 li
73.6912 67.4622 li
83.1222 67.4622 li
83.1222 70.3441 li
92.5522 70.3441 li
92.5522 73.1512 li
101.982 73.1512 li
101.982 75.6581 li
111.413 75.6581 li
111.413 78.3521 li
120.806 78.3521 li
120.806 80.8602 li
130.236 80.8602 li
130.236 83.2552 li
139.666 83.2552 li
139.666 85.4251 li
149.097 85.4251 li
149.097 87.6331 li
158.527 87.6331 li
158.527 89.6161 li
167.957 89.6161 li
167.957 91.5992 li
177.388 91.5992 li
177.388 93.7701 li
186.818 93.7701 li
186.818 95.4171 li
196.248 95.4171 li
196.248 97.4371 li
205.679 97.4371 li
205.679 99.0472 li
0 .990631 1 .000396735 cmyk
@
54.5312 142.419 mo
74.8512 142.419 li
17.1094 163.188 mo
17.1094 24.8392 li
26.5402 24.8392 li
26.5402 38.1241 li
35.9702 38.1241 li
35.9702 54.5142 li
45.4002 54.5142 li
45.4002 67.1631 li
54.8312 67.1631 li
54.8312 78.9141 li
64.2612 78.9141 li
64.2612 87.7831 li
73.6912 87.7831 li
73.6912 96.3901 li
83.1222 96.3901 li
83.1222 103.425 li
92.5522 103.425 li
92.5522 109.824 li
101.982 109.824 li
101.982 117.084 li
111.413 117.084 li
111.413 120.564 li
120.806 120.564 li
120.806 128.236 li
130.236 128.236 li
130.236 131.267 li
139.666 131.267 li
139.666 136.094 li
149.097 136.094 li
149.097 140.622 li
158.527 140.622 li
158.527 145.001 li
167.957 145.001 li
167.957 147.77 li
177.388 147.77 li
177.388 152.298 li
186.818 152.298 li
186.818 153.046 li
196.248 153.046 li
196.248 157.762 li
205.679 157.762 li
205.679 160.755 li
.895628 .7673 0 0 cmyk
@
.37422 lw
17.1094 1.56213 mo
17.1094 163.188 li
205.679 163.188 li
205.679 1.56213 li
17.1094 1.56213 li
cp
.750179 .679652 .670192 .901488 cmyk
@
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: ECAAAA+CMR10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ECAAAA+CMR10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMR10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /colon put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 81 /Q put
dup 87 /W put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 112 /p put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
def
/FontBBox {-40 -250 1009 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 448 666 677 683 705] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
18 dict dup begin
/colon <1C60D8A8C9B8574464AEAFAC7C68900D93273DA49162F3A5B8C16D30
B96C6FD4E30E80E1F78558AD2540B994A3F8C4499D90D9C7B92969D703EA7177
FFCAE7C73BA4F83773> |-
/C <1C60D8A8C9B6079FE0EE62D79560027BBBCB170A7709037203D620100C78
000AFC53792FD4192A63CFDE4C7CCFBBF640912DE1EA497F0D0E9CACF7B55459
0931F67EC30C725B283FF8701F318F6A51E9DAFF6E43D2B77ABC7C9D046D0346
C0BC1B195971779D6643699369A8474D056C5265E53617DA697597540B11F476
0D558D2A79BC5EEE54EC8A8FB0679FBAC9400141E54057CB9E273F1EF671A537
9A4BB4B27EBB1E02C7> |-
/D <1C60D8A8C9B6EEDBC0C41A524F9E758CC382DD66BE427C2A2DF4ADB78D9B
43846F3F8F08E1E597E79AB7612DDDC707AAEC06A2898443CA82FBCA30E55581
0A2E60B2C29C04A656D62CA2D655E98AC514E4B623C13C73CAA3C9CFC7408166
8903A078DE399FE0D6CFE2A29266920A5C524CC4E2D86939049425> |-
/E <1C60D8A8C9B65DE708408E894B780C980FB3CD0F5A2C0BEF23E5114F36C9
09584A712E7AFDDA2F26FF878CC11EDE914164339F97B59F3659C5E3C5144DA7
9350C562BF05A1FC95A59765A840A579FDEA86DCEB7F99647561868501F99D35
BFF4F16CE8CFA6310AD24B7256C45B06ACB6DF245FF3654675E2E019899536DE
4452B0D6D01DB1C11617465A> |-
/Q <1C60D8A8C9B6FC2D94049DA5C2BC316FFEC81442DD320AAD390B83AC98C2
101130F7895E3BAD1E3ABEA58274B987C2D54DF61C6199E9DC005646C3865791
18DE8846A8A5FF8E69936656D238841627B7C6DE810EBC73F5D2E842738AC552
A6C7A6528754B13A8C5FD9264F0FC1B21AAE73393619182592CBA91730F0EE16
8114B0AE228C6BFAE4C74AA4F63E3ECD69BD56510B0C580954219CFE34E4F20E
DEAC58526F5EFD32019F97F1EE3895FE8F12ECE858A5B5561010BE300BFB27F4
5435C324383861D4A78CAFFFAC8449617E20DB002FE88B58A1F793F4CF594D64
B5485675DF326751F18B81ACFBE9973F1C83CDCC> |-
/W <1C60D8A8C9B505563364AC8BE8AB65E15C6C08AD458A3C49B32AF7A6889C
E67A7C3A7AE930FDF331D78AF6B2774B2E2F9165802F51899041EFBD3924C43E
D76A472FF8E62DD42BB26872119346C8E5FAE87DF4A5B6404CEC1023A1889FE1
14BA5E56D8DAB21B203F5E6D874C0E17030C65A10469C5F86A53A7D1CFDBCD0E
6B94604F94EF6BECF776BD9FD84BFC7AF2D1AA08788921B6CE8FD734B2E9372A
CA3C7D976E4DF8C6EED1CE088EB43DC42B2D6388D9B8E9E4C6FA2D7E84106976
063DE8EEDEDD5065F70DF6158531A23BF77B8F77A74E19614095CB2049840CA4
D0D45F1041ABD9861325F1156E78D91D6A706606395E26954346A8584D3C7D06
B32B91751B6AC28A5309BAC9B774A4A1514E73B9AA13764701722D129040EC> |-
/c <1C60D8A8C9B77FE2B98B448AAC15CD6088822B1EF090F0AF6EBCC9DDBBDB
F65EF50E59DA466BEF0FA242351362893C7564E99AEB6F42CD9ABC234329EBDD
53E590403FF06858A28FE170B71597883CA2148468202C6DAD0EC83B55607026
EDF229F6C24FEC7F46E5F53E3632239AC20591F5D1A939BB80017E6C55D3D867
51973D2E06541F43DD3086EAE96863ECE0301F79F72109AFDFA112C3A8> |-
/d <1C60D8A8C9B790A8362C570CE7DC14ED8339A5DD8D37983A5A2D0B4F515E
B70692477F5F548E28F1DCAB41EDF4BA0728DAF245495BE02E394B0DD240B5D5
5EE51A3675003CB15BB911F900B1E5DDC9F583E654C623831C440B91AF47A14F
90BB1788AEF8D63BB1C09A0DFFCC46AF6B9E95BF92169FAA4D5042B81ADB2768
FDD695BCD7BA015B086BADFFD844444D05A45C7E170A2C8460474939E15E0EBA
BF1131915EE0697E92536E40A464505CA536EC3A6940E2FEEC193EC0EB65C183
99A9D9> |-
/e <1C60D8A8C9B77FE2B98B448A6D851DB2CAC9451BC5A778A9834F3ED148EF
8C2095ABE60FC1B26DBB94057B63BED2BEE770D96BCB613AAAF017CD18C97CCA
61C46589119EDD299B58A1852EFEBDB7EF2A6D8606D19DEFCD13B1531BE3098F
0C00520EFD32FA435A0514B86269DFF5EE650657E526962BA2F3447589A03D4D
A2371542253C2A1E1B028917A1E5> |-
/i <1C60D8A8C9B8574464F1B435BC57209FEB2C54026A3BBB707C1ACEEAD444
C0BCD7940801068D7665A567CBC52ABA43208AF37F075A1C65586B76611081AB
5310CF42CD496B0F8F59766AFDA0C4BF40BC709402C0DD0AB42B4F3987C50B56
17CF3B4859C86132A1A7E65B42225B2228E50B44DBFBE367ABD36EBF02ACAD4F
B895EE90259DCAEBCEFB9765574F> |-
/l <1C60D8A8C9B8574464F1B434E924E8E17F47A16A389514CB900F56482ADF
B78CE880D41A1EAC41DBDDDAD723AAD75825AFFB2E5AD2853D684AACA377F4CF
F61F8762E467D7432F03C259012AF7AA821CB502C120A1BA693F9CB4DA4BB1D3
2A> |-
/n <1C60D8A8C9B790A83D946A52D13353207152D3DCC239C62B9F0F0BD9624A
AEAC8EB33D804BC103BF4C84F8FCB252709B3422B4E5F4D698E79D5531B2BC67
6C0D12EEB603C056C169F17DCC9F0F6AC43F292D82458847D2D279D19F466EA8
4C7027B712BFD7C4B4B770C9E0BD2D556C526F95495C91C927B8F7463DFDACF3
970984B31C39C074ECA243D9C8BFA10955B7D910908799AA616A425B937E17FF
6121AD71909EE5D3B89CA2D13AAC585FB6F54A794E7F44844B39E96B6AE21032
D420B68967AC9AC0F0DA0D53B8016F26EED527CB2387F1592BCDB6A91E073E83
C3181BD7505792D4855E> |-
/p <1C60D8A8C9B790A84D73DFE4D381CFD68735E4475645A4E53BCF7DB579C1
AFDD13D1A6F15CA06B47ED1C3E1B244798306364BC5CABD6DA63519493A5C659
BC60B5447F0104F114BE694DF580105735E360631FEECD6EC7A012CC85171828
1D07B0CC157A8E7B5931B7103AE94662442B62C7C336402079CFF632ADA590C0
779C308A1FCAF94180306BE01E5D89C2BD042F11A347AFB582199E7E84F8C797
ABEE0EDBB75C6E1AC5F4E76437DB6ED4E096E1BDAADA422AEEAC70BB94A61E61
EC7C901D077227549E6F61C4273BAEF20A141FBE8FA9A551273E39D70B> |-
/s <1C60D8A8C9B731071688E37ED9B7C64FA956A3F4F3785F4130685F1AE6EC
B30084C557AE5797D39605F849A2D9ADE2A65CA0927636C7629B25FDC4D569E8
97F36515E172780EBFB2CFAF71CF0EA8B4DD392E776CF20E7204D59F8DC03F56
CB4421E12FE8430EBD29CFDF5F6509E086EB0664E99116F88F2D5E9A8F8E96C8
47773BE6B8B90D0A0CCE846E18C0A1DF77A626724C95EC9E6FDFE55022CAFC89
18AE45838B303979E3A9BFE7F7BDAB73505805005500EF4C5AC6405B1E840CF1
B619C716D89CA7E80EEDEA1B928C67F7A10B24DE3EC254855DAC8B83797B28> |-
/t <1C60D8A8C9B737EC5C828C415A21EF65A8DCE4AB75C4F804FD2F74AAED03
32CF1075799E326C4CB510197DA3A668B8EFF3F2CAC89EFC9F1E24EFCBB6E4F7
D58562BB90C45FF297D6656314FD65E690525FFF895AC8C24B58CDA801> |-
/u <1C60D8A8C9B790A8362C570CFB2800E8CBF5A206A67F17BAAE343254C03E
958F83CB5A12ADFA8B4412150589560DDE9B70784A29B02FB60C9645231D13A9
78308E5EE53984B78C9AC2AA2F0EE5269299E66EC0A2F6D2FC9C7C56146B4A2D
450F3E529F72E7D7FD96107695E2148A6B3CC77B93CD510A44599C53106E6043
B1ADA6520148DE> |-
/v <1C60D8A8C9B78C669403575833C8C1B14674B390D764957989B7FCA39046
F88EAC215F3348F64657FA41BBBD2D5465C3FAEC5C4992D77A70D6D0FF5B9FE8
4D58B8A01F974B26A648270BCBC3DA08E1FB6DCB4BD59931217BAC36EE05C15D
6C9332DAEE553F44B623DA84A3E35E45703CEA683F59CB5D7DC58019327FAA46
90D7E0848C4054F367D2C3BF6371C99CA6751F50C10017AA2754321B985E8B60
B10B9F082539BC1A53136644081D5FD9AE168FC766A25A8946C2> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ATVQTW+CMR10 /ECAAAA+CMR10 findfont ct_VMDictPut
/ATVQTW+CMR10*1 
[58{/.notdef}rp /colon 8{/.notdef}rp /C /D /E 11{/.notdef}rp /Q 
5{/.notdef}rp /W 11{/.notdef}rp /c /d /e 3{/.notdef}rp /i 
2{/.notdef}rp /l /.notdef /n /.notdef /p 2{/.notdef}rp /s 
/t /u /v 137{/.notdef}rp]
ATVQTW+CMR10 nf
ATVQTW+CMR10*1 [7.45644 0 0 -7.45644 0 0 ]msf
33.1862 144.237 mo
(QCD)
[5.83778 5.38878 0 ]xsh
37.2276 137.232 mo
(EW)
[5.11928 0 ]xsh
28.4261 21.3727 mo
(pp)
[4.13133 0 ]xsh
%ADOBeginSubsetFont: NAAAAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /NAAAAA+CMSY10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMSY10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /arrowright put
def
/FontBBox {0 -960 943 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 0 683 705] def
/OtherBlues [-135 -124] def
/BlueScale 0.0416667 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [40 56] def
/StemSnapV [40 56] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/arrowright <1C60D8A8C9B5EE310D75E4BB53DC02FA37EF400C5757DA6810E
A2B12BDC053A73FD6C53F135029B3F7A374A711103BA88B731E24F20B39AE334
7183461E46E354C1C98812EBD788BE39A2477C7CA652D7E626B0E06422F70438
3B24D50F9F5755EEB64CB749A1BB113F3301ABDA1CFA9DA7DBD164F5C9B> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ATVQTX+CMSY10 /NAAAAA+CMSY10 findfont ct_VMDictPut
/ATVQTX+CMSY10*1 
[33{/.notdef}rp /arrowright 222{/.notdef}rp]
ATVQTX+CMSY10 nf
ATVQTX+CMSY10*1 [7.45644 0 0 -7.45644 0 0 ]msf
38.7546 21.3727 mo
(!)sh
%ADOBeginSubsetFont: JAAAAA+CMMI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /JAAAAA+CMMI10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMMI10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 22 /mu put
dup 23 /nu put
dup 27 /sigma put
dup 106 /j put
def
/FontBBox {-32 -216 1044 683} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 0 431 442 453 466 683 705] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [72] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/mu <1C60D8A8C9B7C12A5192EF3A04B28E19133C569BB43A074557B35DCA2A2
24F875427AE316894658D8B600663F3FC1470CBA5B5E47A3ABDADBCA51F05B42
2E642149FA63C7C833FDF556024F154D07C6E0224C9ACC78493A3FEB790D05D7
0BC472F68B8E2919CE4D3E207B7E5F47815859B2EF2E754FB0871A302BDA06D0
8301F95BD0E55063EF4D4ECFFCD085673204B128F7DF117AAEE6B127B5B8CEDE
CD90532219B6095F5EB13A532B6E7D18FD7CB6162BC5434B47DD6EA1AB9D40E9
2B1ACF74C87B37A3C74A3D5B3AB> |-
/nu <1C60D8A8C9B7AED80832B2AD23EE52BE67A0A0CA4C389DB9AF645E2E460
CDC25A7C9F6FCD7A63933EAF137AA8D4F4D9BC926F58A9739501373AF55FB8DE
E56F4B04B37986B23A710918BE1271EEA70BF092C0B1CAD9202ACE52E01C5631
471DA3E11236F7433466C98F5F8A6D3C7B84283C54AEE32> |-
/sigma <1C60D8A8C9B7E02ADD9A9645B6EFEFDAF8223441C504B97557ED1331
4FE544C9EC1A4406DB0721B939B9558B16716B0F0FF7B06C03D0B74C12F5C9EA
F2F3F5230C06C2BA0F17D29505064C824CF331A94AFFDE518E68EA269F3BD5D5
CAB13DA3DA4393C4E631DAFE8831AF656D23D2065E3B2DD1> |-
/j <1C60D8A8C9B7008A514089371E7F6C3F852A3CE5C127370B236F47AA9C8A
C019CB30198B0F9B562EB2AAF5462A73919E71099A23DF2F310B8412D429BA12
CAAFF3861208A6F813AF227CDD41326B28374679C7D0DAD15F3C60DA7CA3A1FF
BDD27E7F1EA5C89C2C62A5266172A8E394744211CD22B36375E13AC626FBF17D
0F94E85B3C1DE145D3DDE7BE6FDCD2D1D486D7C75C90F3CEB0658F9109B29310
D4F9> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ATVQTY+CMMI10 /JAAAAA+CMMI10 findfont ct_VMDictPut
/ATVQTY+CMMI10*1 
[22{/.notdef}rp /mu /nu 3{/.notdef}rp /sigma 78{/.notdef}rp /j 149{/.notdef}rp]
ATVQTY+CMMI10 nf
ATVQTY+CMMI10*1 [7.45644 0 0 -7.45644 0 0 ]msf
48.2749 21.3727 mo
(\027)sh
%ADOBeginSubsetFont: ICAAAA+CMR7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ICAAAA+CMR7 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMR7.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 101 /e put
def
/FontBBox {0 -118 1121 683} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 431 446 664 674 683 703] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [36] def
/StdVW [79] def
/StemSnapH [28 36] def
/StemSnapV [79 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/plus <1C60D8A8C9B593D6D8BB90123291AA259E2A2720FD4880A5BA5668DBB
3FDE6DF999803DA9EDD496C11A38D856114909900BC9E753D6A6BF5C2786C87D
5C6E0CE8F6625D8E3C55B080D69D2651DDE1B21281AD85504D17B37BA0750A5> |-
/e <1C60D8A8C9B7A08673B8E4C5016740B9CC664A426F12588F8D424733F6BD
40DCD01B24ECA00FD6A515E55F17B9B88499014D2674E1A6343304528599E325
0A319A430A458C14DADF26B1BB4DC49CCE1152C3A434CE9E3BE42F001677F888
389928D48B1A2B8D18B30396D2D254C858AEBA6C771096986FB1FA> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ATVQTZ+CMR7 /ICAAAA+CMR7 findfont ct_VMDictPut
/ATVQTZ+CMR7*1 
[43{/.notdef}rp /plus 57{/.notdef}rp /e 154{/.notdef}rp]
ATVQTZ+CMR7 nf
ATVQTZ+CMR7*1 [5.21951 0 0 -5.21951 0 0 ]msf
51.9569 22.4508 mo
(e)sh
ATVQTW+CMR10*1 [7.45644 0 0 -7.45644 0 0 ]msf
55.0108 21.3727 mo
(e)sh
ATVQTZ+CMR7*1 [5.21951 0 0 -5.21951 0 0 ]msf
58.3339 18.6785 mo
(+)sh
ATVQTY+CMMI10*1 [7.45644 0 0 -7.45644 0 0 ]msf
63.2733 21.3727 mo
(\027)sh
%ADOBeginSubsetFont: GBAAAA+CMMI7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GBAAAA+CMMI7 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMMI7.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 22 /mu put
def
/FontBBox {0 -214 1171 703} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0 431 441 451 463 683 703] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [81] def
/StemSnapH [32 36] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/mu <1C60D8A8C9B62B9496EA6A5F4B0DB6E285AE3CC5F76070E9D0900B8E9FB
8BB0D4197D1A2DD59EA5C34E7E07F4C901FEEAF8469C7C1D2ADC049F489D443C
94412286D62F02E1B2CDD53F2E790FA86ACAAB6C0C197701F917DC40928C56DF
8CB23C05C1517B6379CF4DFC0CF2B813A78C4566C10B5CFE2E1A85E39F2E7315
0E833D337F5C20540E3A61A8691FA5423C0C17FCF73D4EC215E0AA7E60754B3D
13B20403263483B2B6569F56CFD6328D38088230363BC189DF44352B95D109F5
F4208BF4AC6092171FFC97A681C9437D5E1E824878D17C139FB> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ATVQUA+CMMI7 /GBAAAA+CMMI7 findfont ct_VMDictPut
/ATVQUA+CMMI7*1 
[22{/.notdef}rp /mu 233{/.notdef}rp]
ATVQUA+CMMI7 nf
ATVQUA+CMMI7*1 [5.21951 0 0 -5.21951 0 0 ]msf
66.9557 22.4508 mo
(\026)sh
ATVQTY+CMMI10*1 [7.45644 0 0 -7.45644 0 0 ]msf
70.9975 21.3727 mo
(\026)sh
ATVQTZ+CMR7*1 [5.21951 0 0 -5.21951 0 0 ]msf
75.4882 18.6785 mo
(+)sh
ATVQTY+CMMI10*1 [7.45644 0 0 -7.45644 0 0 ]msf
80.4276 21.3727 mo
(jj)
[3.5027 0 ]xsh
ATVQTW+CMR10*1 [8.1648 0 0 -8.1648 0 0 ]msf
28.426 13.2899 mo
(W)sh
%ADOBeginSubsetFont: ACAAAA+CMR8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ACAAAA+CMR8 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMR8.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
def
/FontBBox {-36 -250 1070 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 446 665 675 683 704] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [33] def
/StdVW [76] def
/StemSnapH [28 33] def
/StemSnapV [76 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/plus <1C60D8A8C9B6AF04CDEB25D12C5E26F197F165B1E846B805E270AB730
DC8C535451A42F505B0ED2CA83B529FD67AD781784D5719F37A18216D7FBA676
CFE90389B3DD18578BC99631B2E3515AEFDAE18B606FB1FA37645C1720541> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ATVQUB+CMR8 /ACAAAA+CMR8 findfont ct_VMDictPut
/ATVQUB+CMR8*1 
[43{/.notdef}rp /plus 212{/.notdef}rp]
ATVQUB+CMR8 nf
ATVQUB+CMR8*1 [5.96515 0 0 -5.96515 0 0 ]msf
36.8686 10.3258 mo
(+)sh
ATVQTW+CMR10*1 [8.1648 0 0 -8.1648 0 0 ]msf
42.2573 13.2899 mo
(W)sh
ATVQUB+CMR8*1 [5.96515 0 0 -5.96515 0 0 ]msf
50.6994 10.3258 mo
(+)sh
ATVQTY+CMMI10*1 [8.1648 0 0 -8.1648 0 0 ]msf
55.9987 13.2899 mo
(jj)
[3.77223 0 ]xsh
ATVQTW+CMR10*1 [8.1648 0 0 -8.1648 0 0 ]msf
63.5432 13.2899 mo
(:)sh
145.362 44.0054 mo
(inclusivesetup)
[2.24524 4.58041 3.59253 2.24524 4.58041 3.23322 2.24527 4.04135 6.37659 3.23322 3.59253 3.14343 
4.58041 0 ]xsh
ATVQTW+CMR10*1 [7.45644 0 0 -7.45644 0 0 ]msf
163.774 10.4156 mo
(d)sh
ATVQTY+CMMI10*1 [7.45644 0 0 -7.45644 0 0 ]msf
167.905 10.4156 mo
(\033)sh
159.467 12.1351 mo
176.801 12.1351 li
176.801 11.7758 li
159.467 11.7758 li
cp
f
%ADOBeginSubsetFont: ECAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
ATVQTW+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B790A83D9E7A6001AC854EF8B943E743E91B99DA29586301CD
D5839823233D99B1C577C1F4DFF0EA0F32BC2086F2707A7DD20AF9B67CEAF2A8
142C0184903C062BCDA3F619B0D53D20F97863BA7527C41ABC984D83E7927537
7BA320AFBB48F48B2D10088BC89EBB9C01D05CB682732B7056131A0BF4F223A4
5FB196C15FF8C20088CC8B4C909F5F0D72D1839A24540D889C90DD68E933DDAD
60B1B6BFBEF9B96EA41D08123BC10ECBE3BFA295FF397E499C14DA43850D7296
20> |-
/f <1C60D8A8C9B83BB81FA130945C39F84E5B6E4A6C9F65F126BAA27979D5DD
24D841AF174619487B50FE2700B1E5283B920CF0C36EBD127A2FB193DC3CC442
CA2E2038702792712AC88F8A95F0FA297EC3B143EBC57B59693CDD3FD2B58E1A
0E615D44B1BC286B802CB88D50954B5E67313CC26D2733BD799245E69ACF97F2
A9BABCDB06A9D69EA77A4D41E95E2A8D3382998D0B0648C54FDA3BC85D30> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ATVQTW+CMR10 /Encoding get
dup 98 /b put
dup 102 /f put
pop
%ADOEndSubsetFont
/ATVQTW+CMR10*1 
[58{/.notdef}rp /colon 8{/.notdef}rp /C /D /E 11{/.notdef}rp /Q 
5{/.notdef}rp /W 10{/.notdef}rp /b /c /d /e /f 
2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /.notdef /p 
2{/.notdef}rp /s /t /u /v 137{/.notdef}rp]
ATVQTW+CMR10 nf
ATVQTW+CMR10*1 [7.45644 0 0 -7.45644 0 0 ]msf
159.463 18.3201 mo
(d)sh
%ADOBeginSubsetFont: JAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
ATVQTY+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/M <1C60D8A8C9B5CCDCD0CBFA2473A0A828BFA6BF1AFBA9AFFCC704941734B8
B0734BC5E573D252A6EDBAC24F82D713975D844ACD58756DBABB93A6DEB3AD66
872CC1EDA8158A7EE99A15444940B09C7C0EF55DF6C8749F118EF244154E0860
FE09620DB3FB7D2AC5562BE154B19E6297B4832BBC1775AA6DE546611C24689F
92A82B1EC2B2EBF7A4920EE5C787170A9DB70F9273F987022F864F1A763D0B96
C95578EA39E26C555BB65113B8C78A11ED854F827540382664DE294A81E78DF7
D8016DBA0E416A40FEF2444117F2FF62B0ADFA98B6CC29157187BC1AAF9C93F6
F9F447E192BB9A48F0C6CDCA8D29B1138B8BE61DC8A20F88CB704CE725B12758
41B30F9EAA7C6D36305E07A155973A5E478B7B6D5BA671FC5CDD1CE50524EBC5
D22F45C3F3AFF3C86F1F01DE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ATVQTY+CMMI10 /Encoding get
dup 77 /M put
pop
%ADOEndSubsetFont
/ATVQTY+CMMI10*1 
[22{/.notdef}rp /mu /nu 3{/.notdef}rp /sigma 49{/.notdef}rp /M 28{/.notdef}rp 
/j 149{/.notdef}rp]
ATVQTY+CMMI10 nf
ATVQTY+CMMI10*1 [7.45644 0 0 -7.45644 0 0 ]msf
163.594 18.3201 mo
(M)sh
%ADOBeginSubsetFont: GBAAAA+CMMI7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
ATVQUA+CMMI7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/j <1C60D8A8C9B7438395C05C3169C7D7F1B75841D59B682CA8E1CB804C6469
10A66FD2FCC71781905A58559BBA987CC824FFAAB397A0A844F68F0784D79177
8BFA705461CB803F3EE01A604672F851DFC355D949F816439FA935B222739DB3
7285B3A3E42C0239F8EE5F68050B2DF98E8AD7E2799FC0902863F65C628C563B
12CEF5D2630A2BB2B44B3A9C73B011F81C919CB27F1DB0217F205BFED4F83AF7
102BB68BD0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ATVQUA+CMMI7 /Encoding get
dup 106 /j put
pop
%ADOEndSubsetFont
/ATVQUA+CMMI7*1 
[22{/.notdef}rp /mu 83{/.notdef}rp /j 149{/.notdef}rp]
ATVQUA+CMMI7 nf
ATVQUA+CMMI7*1 [5.21951 0 0 -5.21951 0 0 ]msf
170.869 19.3979 mo
(jj)
[2.69455 0 ]xsh
%ADOBeginSubsetFont: XAAAAA+CMEX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /XAAAAA+CMEX10 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMEX10.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 104 /bracketleftBig put
def
/FontBBox {0 -2959 1387 40} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 0] def
/OtherBlues [-1159 -1139] def
/BlueScale 0.04796 def
/StdHW [47] def
/StdVW [47] def
/StemSnapH [40 47] def
/StemSnapV [40 47] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/bracketleftBig <1C60D8A8C9B743839199E0DE55B8B4DC697CB8CD0EC4EF8
E3AAC07A311FDBFB2D8BF177F977A3D61A0D719299B24E363409C0356AD29> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ATVQUC+CMEX10 /XAAAAA+CMEX10 findfont ct_VMDictPut
/ATVQUC+CMEX10*1 
[104{/.notdef}rp /bracketleftBig 151{/.notdef}rp]
ATVQUC+CMEX10 nf
ATVQUC+CMEX10*1 [7.45644 0 0 -7.45644 0 0 ]msf
179.402 5.56659 mo
(h)sh
ATVQTW+CMR10*1 [7.45644 0 0 -7.45644 0 0 ]msf
187.485 10.4166 mo
(fb)
[2.24524 0 ]xsh
183.767 12.1351 mo
197.599 12.1351 li
197.599 11.7758 li
183.767 11.7758 li
cp
f
%ADOBeginSubsetFont: ECAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
ATVQTW+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C1
2484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D
1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42
892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18
232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-
/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1
BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF0
25DDA723DD68103C537890571B4B95BCC242A78DD7EA0DA80E91751ED6DEA668
D97ECF27E58978E82B8932F2635747B0D240AA> |-
/two <1C60D8A8C9B7A73DC50B0411757B441481CCF7EF812EEB9B3F6A07BD51
606BCA866C4BD24CA34E86B9CA5A529B664F3EEDB6B4AF8A2B994DB57B49473E
162231CB943675FE63E9B92B8AEBB62FB22456EC4173C66EF6C2F34FFEC22ACA
E77FFFAAD70F3754CADC0D2CF63CB6D286D930AEA5A613E5AB9CB004BEAEBADD
D070EDAF4FF25FDB6421F540D58D2C7A3FC40290CBCF831BE1B89B7F> |-
/three <1C60D8A8C9B7A73D3B2B97DEB4C7BDB68E0D63865C8BF294429AD1BA
AE59A25299F9306A9E28AA5C0C0AF9F97F56096DB0FD0EC440ACCE834B0BA539
2FD94D026768A961AA5D1A88FAE30F2B2033E77AFAB55B0B9C8092CD226DD9EF
EEAAF5CD5AE79D6DDEC4C37DC43DE3B85DD2A2EC4DC0C9F349D5E8F9F615782E
DC8C53805553FD3C0007C1818BF3D99AB659A079ED36132BBDC613CA63D7A0FE
429706DBC6BA998CE56A89C002758EF37F90A390F83B3DFE49D312FA66FDF2F1
6212D1503559B7B1637726D82590655B813B5B489A6AB087D0B93F61541C2082
9B36C95E4A39F5BDDBA400> |-
/four <1C60D8A8C9B7A73DC579B9C1587087D4749982A674065FCDD01CF53F5
4AF89DAF22339F0A467CEB54960C4097888AD7CBC676C4076733D124E7B4C79B
6D0E020E27E56B7A34848B450E2A23F2DF3103BCB5E75D289FAF3FD67A12C99B
2EB0A8390A7DAB0DD8B7BFBE34B66044D4D46D3CB580B3DAECD8E50CD2549B45
50A6A6B131A61C4> |-
/five <1C60D8A8C9B7A73D3B2B97F19D54A2E00E7DDA8E72064220CB7581D13
CEDF071F346430E40993A6297E3A2A6D6093205222D977AC7F7B65CC82B221D9
B18ADEA5D4AF0261ABF060D3E283C7B3B5EB39FF499721FD51203AE59E3BEA25
7DFD3E472FEF67221488EC8D1F355E2FAD057CA44A8B4BAD6C6C719C164907CB
F9A6CC770DB0C7E58A37D2385E23F576BCFF94FFBFD8ADD4C5E6C32CD83ACEB7
7472D00FE1A4DC66393A99AC6BBD252B04C98B710149EA42B66ACE89D4FC4393
F3A09165DF477ABCB0E8A8DB21E4278CA219EBCC9B067F95E336B85E37D444AD
601D63D5ECEDC6A300696D98ABBC6ACC6E54D428BA49C3B1F> |-
/T <1C60D8A8C9B6079F1E7C72A986CAA37AA7098C99AF0AF69B4A41FC4A68F1
E13FE7823CB14087D1A03D6BFDE96D0070A345145633BA7CEFA8D419E4B3D53F
3ADD4AFFBF58183F1DBEF117F5DA2182D1339AE0D68A7AE8CA1EE41AF8BD41A3
51EC8A2430F7755B61B26BC5EB1AA644C085DEE637125F5B22BE10C6D86DE87E
0F1819F7C2FBA63DE9C720513FB0A1601F05E184CBD6E137BC266718B83D2495> |-
/V <1C60D8A8C9B6E3FADD48816EB8424E8F57A41D8613F7E968C9BB1B02E143
FC779521473E85AC3FDDB70230FD5AC8A799CC105B900902F681C26F2CF5169E
1D28FA4F6B0C7A570A1EAEDD1568F3815B4073CFD3901DA4DC138D832EA95377
6BC457AFDFF8491C649A0DB6870897DD41335AD9B9589634784946F43BCBBD7A
4581826E0D3C585AA4EFCF9736D89BF657946580134CB715D83D4A12A5D3C2E5
65E9CF92286FED111732FC93E1CA96F815A6B51DE39654A3FF21> |-
/bracketleft <1C60D8A8C9B857441457F48D14F3F47B30BCEFA5B1BB16AB48
A411FDEDDBBCA4E8659FE72DCA596311382BB6> |-
/bracketright <1C60D8A8C9B857441457F48D14F3F47B30BD99EBE2CD4840C
E39569BE9FF8DDD4604DD868D11B34C9C90BD70> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ATVQTW+CMR10 /Encoding get
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 84 /T put
dup 86 /V put
dup 91 /bracketleft put
dup 93 /bracketright put
pop
%ADOEndSubsetFont
/ATVQTW+CMR10*1 
[48{/.notdef}rp /zero /one /two /three /four /five 4{/.notdef}rp 
/colon 8{/.notdef}rp /C /D /E 11{/.notdef}rp /Q 2{/.notdef}rp 
/T /.notdef /V /W 3{/.notdef}rp /bracketleft /.notdef /bracketright 
4{/.notdef}rp /b /c /d /e /f 2{/.notdef}rp /i 
2{/.notdef}rp /l /.notdef /n /.notdef /p 2{/.notdef}rp /s 
/t /u /v 137{/.notdef}rp]
ATVQTW+CMR10 nf
ATVQTW+CMR10*1 [7.45644 0 0 -7.45644 0 0 ]msf
183.802 18.3201 mo
(TeV)
[4.76016 3.32306 0 ]xsh
%ADOBeginSubsetFont: XAAAAA+CMEX10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
ATVQUC+CMEX10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/bracketrightBig <1C60D8A8C9B743839199E0DE55B8B4DC697CB8E16E421D
B134C33ED1858FD58E1B8BAA15835E0B0F1C758CE176FBBDD5452F36DC5C15> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ATVQUC+CMEX10 /Encoding get
dup 105 /bracketrightBig put
pop
%ADOEndSubsetFont
/ATVQUC+CMEX10*1 
[104{/.notdef}rp /bracketleftBig /bracketrightBig 150{/.notdef}rp]
ATVQUC+CMEX10 nf
ATVQUC+CMEX10*1 [7.45644 0 0 -7.45644 0 0 ]msf
198.442 5.56665 mo
(i)sh
ATVQTY+CMMI10*1 [8.1648 0 0 -8.1648 0 0 ]msf
93.8097 187.708 mo
(M)sh
%ADOBeginSubsetFont: SAAAAA+CMMI8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /SAAAAA+CMMI8 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMMI8.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 106 /j put
def
/FontBBox {-24 -215 1110 705} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [78] def
/StemSnapH [28 32] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/j <1C60D8A8C9B76E37ED91DCD4EB7DD687F7614CCB8475B9F904D077FE9814
AA93E69D1175F4E6802EA1788AA27F72433F5895683211ED59EEBF5D32EE079C
81F6B97C55B2EFF7C16A1EA01882B71DB511EEB4E75639E7B4B4E3712E9446F2
79B3A7354BB80EEDE38A76761ABC62936A30CD62332A5160A2BCEEA1EDAE79F1
A81AB9B05D1BD5EDDCF488B99F7B8A779BE2C6056B8B82CEECD0C28C90D96DD0> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ATVQUD+CMMI8 /SAAAAA+CMMI8 findfont ct_VMDictPut
/ATVQUD+CMMI8*1 
[106{/.notdef}rp /j 149{/.notdef}rp]
ATVQUD+CMMI8 nf
ATVQUD+CMMI8*1 [5.96515 0 0 -5.96515 0 0 ]msf
101.713 188.965 mo
(jj)
[2.96368 0 ]xsh
ATVQTW+CMR10*1 [8.1648 0 0 -8.1648 0 0 ]msf
109.348 187.708 mo
([TeV])
[2.24527 5.20898 3.59251 6.28679 0 ]xsh
ATVQTW+CMR10*1 [7.45644 0 0 -7.45644 0 0 ]msf
203.83 173.068 mo
(5)sh
166.109 173.068 mo
(4)sh
128.387 173.068 mo
(3)sh
90.6659 173.068 mo
(2)sh
52.9444 173.068 mo
(1)sh
15.2229 173.068 mo
(0)sh
ATVQTW+CMR10*1 [8.1648 0 0 -8.1648 0 0 ]msf
.943222 36.5521 mo
(10)
[4.04157 0 ]xsh
%ADOBeginSubsetFont: ACAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
ATVQUB+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7883C479819BD474E9964F6BF369AAF487ABFE629F8A563
37D176F7C9556B1CAAE607CA6285C927013D8BDE6137B6739AFDAF8D7D8B1E86
BAFBB9D834592D58F996DFF88B929F1FABA7347C2BBDB5519BE210DDE834DD1D
CB9A84AA77E585DFD5A86708901622F6AC3CFFFF626D8C5FD08A157C4A8F19F7
F5FA2E61175441FDD6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ATVQUB+CMR8 /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/ATVQUB+CMR8*1 
[43{/.notdef}rp /plus 6{/.notdef}rp /two 205{/.notdef}rp]
ATVQUB+CMR8 nf
ATVQUB+CMR8*1 [5.96515 0 0 -5.96515 0 0 ]msf
9.02642 33.5884 mo
(2)sh
ATVQTW+CMR10*1 [8.1648 0 0 -8.1648 0 0 ]msf
4.44595 91.338 mo
(10)
[4.04157 0 ]xsh
8.57759 146.213 mo
(1)sh
246.509 163.188 mo
248.867 163.188 li
435.079 163.188 mo
432.721 163.188 li
.750179 .679652 .670192 .901488 cmyk
@
246.509 134.335 mo
248.867 134.335 li
435.079 134.335 mo
432.721 134.335 li
@
246.509 105.446 mo
248.867 105.446 li
435.079 105.446 mo
432.721 105.446 li
@
246.509 76.5931 mo
248.867 76.5931 li
435.079 76.5931 mo
432.721 76.5931 li
@
246.509 47.7411 mo
248.867 47.7411 li
435.079 47.7411 mo
432.721 47.7411 li
@
246.509 18.8892 mo
248.867 18.8892 li
435.079 18.8892 mo
432.721 18.8892 li
@
246.509 163.188 mo
246.509 160.83 li
246.509 1.56213 mo
246.509 3.92017 li
@
271.657 163.188 mo
271.657 160.83 li
271.657 1.56213 mo
271.657 3.92017 li
@
296.805 163.188 mo
296.805 160.83 li
296.805 1.56213 mo
296.805 3.92017 li
@
321.952 163.188 mo
321.952 160.83 li
321.952 1.56213 mo
321.952 3.92017 li
@
347.062 163.188 mo
347.062 160.83 li
347.062 1.56213 mo
347.062 3.92017 li
@
372.21 163.188 mo
372.21 160.83 li
372.21 1.56213 mo
372.21 3.92017 li
@
397.357 163.188 mo
397.357 160.83 li
397.357 1.56213 mo
397.357 3.92017 li
@
422.505 163.188 mo
422.505 160.83 li
422.505 1.56213 mo
422.505 3.92017 li
@
246.509 1.56213 mo
246.509 163.188 li
435.079 163.188 li
435.079 1.56213 li
246.509 1.56213 li
cp
@
.56133 lw
397.058 102.377 mo
417.378 102.377 li
246.509 163.188 mo
246.509 155.479 li
249.353 155.479 li
249.353 154.581 li
252.16 154.581 li
252.16 152.747 li
255.004 152.747 li
255.004 150.128 li
257.811 150.128 li
257.811 146.31 li
260.655 146.31 li
260.655 142.044 li
263.499 142.044 li
263.499 136.394 li
266.305 136.394 li
266.305 129.695 li
269.149 129.695 li
269.149 122.622 li
271.956 122.622 li
271.956 114.689 li
274.8 114.689 li
274.8 106.269 li
277.607 106.269 li
277.607 97.9991 li
280.451 97.9991 li
280.451 89.2802 li
283.295 89.2802 li
283.295 80.8221 li
286.102 80.8221 li
286.102 73.3001 li
288.946 73.3001 li
288.946 65.8162 li
291.753 65.8162 li
291.753 58.8552 li
294.597 58.8552 li
294.597 53.2051 li
297.44 53.2051 li
297.44 48.2281 li
300.247 48.2281 li
300.247 44.8221 li
303.091 44.8221 li
303.091 41.9401 li
305.898 41.9401 li
305.898 40.8182 li
308.742 40.8182 li
308.742 40.2562 li
311.549 40.2562 li
311.549 40.5562 li
314.393 40.5562 li
314.393 41.7532 li
317.237 41.7532 li
317.237 44.9341 li
320.044 44.9341 li
320.044 47.5911 li
322.888 47.5911 li
322.888 51.7081 li
325.694 51.7081 li
325.694 55.9742 li
328.538 55.9742 li
328.538 61.5501 li
331.382 61.5501 li
331.382 67.1631 li
334.189 67.1631 li
334.189 73.1131 li
337.033 73.1131 li
337.033 79.4371 li
339.84 79.4371 li
339.84 85.1631 li
342.684 85.1631 li
342.684 91.5621 li
345.49 91.5621 li
345.49 97.6992 li
348.335 97.6992 li
348.335 103.799 li
351.179 103.799 li
351.179 109.899 li
353.985 109.899 li
353.985 115.55 li
356.829 115.55 li
356.829 121.425 li
359.636 121.425 li
359.636 126.552 li
362.48 126.552 li
362.48 131.379 li
365.324 131.379 li
365.324 135.87 li
368.131 135.87 li
368.131 139.986 li
370.975 139.986 li
370.975 143.691 li
373.781 143.691 li
373.781 146.984 li
376.626 146.984 li
376.626 149.791 li
379.432 149.791 li
379.432 152.335 li
382.276 152.335 li
382.276 154.543 li
385.12 154.543 li
385.12 156.377 li
387.927 156.377 li
387.927 157.799 li
390.771 157.799 li
390.771 158.997 li
393.578 158.997 li
393.578 160.007 li
0 .990631 1 .000396735 cmyk
@
393.578 160.007 mo
396.422 160.007 li
396.422 160.83 li
399.266 160.83 li
399.266 161.467 li
402.072 161.467 li
402.072 161.878 li
404.917 161.878 li
404.917 162.215 li
407.723 162.215 li
407.723 162.477 li
410.567 162.477 li
410.567 162.664 li
413.412 162.664 li
413.412 162.851 li
416.218 162.851 li
416.218 162.926 li
419.062 162.926 li
419.062 163.001 li
421.869 163.001 li
421.869 163.076 li
424.713 163.076 li
424.713 163.113 li
427.519 163.113 li
430.363 163.113 li
430.363 163.151 li
433.208 163.151 li
433.208 163.188 li
@
397.058 110.086 mo
417.378 110.086 li
246.509 163.188 mo
246.509 28.6182 li
249.353 28.6182 li
249.353 30.0782 li
252.16 30.0782 li
252.16 29.8162 li
255.004 29.8162 li
255.004 28.6932 li
257.811 28.6932 li
257.811 30.9391 li
260.655 30.9391 li
260.655 31.6121 li
263.499 31.6121 li
263.499 32.5101 li
266.305 32.5101 li
266.305 36.9261 li
269.149 36.9261 li
269.149 42.4651 li
271.956 42.4651 li
271.956 46.2441 li
274.8 46.2441 li
274.8 52.4561 li
277.607 52.4561 li
277.607 58.5941 li
280.451 58.5941 li
280.451 66.3021 li
283.295 66.3021 li
283.295 74.9471 li
286.102 74.9471 li
286.102 81.6461 li
288.946 81.6461 li
288.946 89.9151 li
291.753 89.9151 li
291.753 96.8011 li
294.597 96.8011 li
294.597 103.088 li
297.44 103.088 li
297.44 110.011 li
300.247 110.011 li
300.247 116.485 li
303.091 116.485 li
303.091 121.837 li
305.898 121.837 li
305.898 126.028 li
308.742 126.028 li
308.742 130.593 li
311.549 130.593 li
311.549 135.159 li
314.393 135.159 li
314.393 138.939 li
317.237 138.939 li
317.237 142.531 li
320.044 142.531 li
320.044 145.899 li
322.888 145.899 li
322.888 147.882 li
325.694 147.882 li
325.694 150.015 li
328.538 150.015 li
328.538 152.597 li
331.382 152.597 li
331.382 153.009 li
334.189 153.009 li
334.189 155.442 li
337.033 155.442 li
337.033 156.452 li
339.84 156.452 li
339.84 157.762 li
342.684 157.762 li
342.684 158.847 li
345.49 158.847 li
345.49 158.622 li
348.335 158.622 li
348.335 160.194 li
351.179 160.194 li
351.179 160.905 li
353.985 160.905 li
353.985 161.429 li
356.829 161.429 li
356.829 161.878 li
359.636 161.878 li
359.636 162.103 li
362.48 162.103 li
362.48 162.365 li
365.324 162.365 li
365.324 162.589 li
368.131 162.589 li
368.131 162.664 li
370.975 162.664 li
370.975 162.626 li
373.781 162.626 li
373.781 162.851 li
376.626 162.851 li
376.626 162.664 li
379.432 162.664 li
379.432 163.038 li
382.276 163.038 li
382.276 163.076 li
385.12 163.076 li
387.927 163.076 li
387.927 163.113 li
390.771 163.113 li
390.771 163.151 li
393.578 163.151 li
396.422 163.151 li
399.266 163.151 li
.895628 .7673 0 0 cmyk
@
399.266 163.151 mo
399.266 163.188 li
433.208 163.188 li
@
.37422 lw
246.509 1.56213 mo
246.509 163.188 li
435.079 163.188 li
435.079 1.56213 li
246.509 1.56213 li
cp
.750179 .679652 .670192 .901488 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
ATVQTW+CMR10*1 [7.45644 0 0 -7.45644 0 0 ]msf
375.66 111.905 mo
(QCD)
[5.8378 5.38876 0 ]xsh
379.702 104.9 mo
(EW)
[5.11929 0 ]xsh
257.826 21.3735 mo
(pp)
[4.13135 0 ]xsh
ATVQTX+CMSY10*1 [7.45644 0 0 -7.45644 0 0 ]msf
268.155 21.3735 mo
(!)sh
ATVQTY+CMMI10*1 [7.45644 0 0 -7.45644 0 0 ]msf
277.675 21.3735 mo
(\027)sh
ATVQTZ+CMR7*1 [5.21951 0 0 -5.21951 0 0 ]msf
281.357 22.4516 mo
(e)sh
ATVQTW+CMR10*1 [7.45644 0 0 -7.45644 0 0 ]msf
284.411 21.3735 mo
(e)sh
ATVQTZ+CMR7*1 [5.21951 0 0 -5.21951 0 0 ]msf
287.734 18.6793 mo
(+)sh
ATVQTY+CMMI10*1 [7.45644 0 0 -7.45644 0 0 ]msf
292.673 21.3735 mo
(\027)sh
ATVQUA+CMMI7*1 [5.21951 0 0 -5.21951 0 0 ]msf
296.356 22.4516 mo
(\026)sh
ATVQTY+CMMI10*1 [7.45644 0 0 -7.45644 0 0 ]msf
300.398 21.3735 mo
(\026)sh
ATVQTZ+CMR7*1 [5.21951 0 0 -5.21951 0 0 ]msf
304.888 18.6793 mo
(+)sh
ATVQTY+CMMI10*1 [7.45644 0 0 -7.45644 0 0 ]msf
309.828 21.3735 mo
(jj)
[3.50269 0 ]xsh
ATVQTW+CMR10*1 [8.1648 0 0 -8.1648 0 0 ]msf
257.826 13.2906 mo
(W)sh
ATVQUB+CMR8*1 [5.96515 0 0 -5.96515 0 0 ]msf
266.269 10.3266 mo
(+)sh
ATVQTW+CMR10*1 [8.1648 0 0 -8.1648 0 0 ]msf
271.657 13.2906 mo
(W)sh
ATVQUB+CMR8*1 [5.96515 0 0 -5.96515 0 0 ]msf
280.1 10.3266 mo
(+)sh
ATVQTY+CMMI10*1 [8.1648 0 0 -8.1648 0 0 ]msf
285.399 13.2906 mo
(jj)
[3.77222 0 ]xsh
ATVQTW+CMR10*1 [8.1648 0 0 -8.1648 0 0 ]msf
292.943 13.2906 mo
(:)sh
374.762 44.0062 mo
(inclusivesetup)
[2.24524 4.58041 3.59247 2.24527 4.58038 3.23322 2.2453 4.04135 6.37656 3.23322 3.5925 3.14349 
4.58038 0 ]xsh
ATVQTW+CMR10*1 [7.45644 0 0 -7.45644 0 0 ]msf
394.431 10.4164 mo
(d)sh
ATVQTY+CMMI10*1 [7.45644 0 0 -7.45644 0 0 ]msf
398.563 10.4164 mo
(\033)sh
388.867 12.1351 mo
408.806 12.1351 li
408.806 11.7758 li
388.867 11.7758 li
cp
f
%ADOBeginSubsetFont: ECAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
ATVQTW+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Delta <1C60D8A8C9B6B41CC7C9465EB7A0CF5F739B85641DBFE29DF5D950F7
723EE93D2208632947D058C55D35FED7FF409493CBC504BCCF0879FC5F12C188
E0F913112DAACF871CECDD24F237C941D4021F42564F689B6F5A> |-
/six <1C60D8A8C9B7A73D3B2B97FE394CF5175EFEC06CD8F59A375E41591273
E0C059123310EC79AE072F532A0C9DF11EDCF7D4B9D83F0A2FCBB058CCF95C0F
F8BAD8605C0C2E8D60E28BE3D0E0DD42D8AAC3094E7159CC3989179C22CC5AA3
B3825C4ED9C5A83B733BA4666CE2A2B0097F22D25C776953D494478010B9DD2B
5DC520FCB2B0B7183A59B91F9C6B76BCB8A8CE135881FEEEB2BD853CC29FB7FD
F436E095CF25C0CF3D1030E991D37D2BB2A05DD251695665BEB980DCF70EB0EF
ACB10E78F2D22C879E92110E4963EE6051EA84F4D334> |-
/eight <1C60D8A8C9B7A73D3B2B97F1414E4E14F801A059892814FA42E4E2C8
0EFDA659D9BB77F349463F4A00D8ED33975855544E68ADA715C46B48E5214EC1
478071E2CA54580909701967B928DD6D384659775DC9744471AF4209ABE86CCF
54E84B03EB8981900A33E230A5E176029A4F3431D5460DA2A76659C526F48B26
52E37466C39C5889089BE6A19F3137FC6D1B485B848C27C668BF6C2B18756DC9
55F5DB5ABF7A74FD3DEC5789AB27D98224E42837> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ATVQTW+CMR10 /Encoding get
dup 1 /Delta put
dup 54 /six put
dup 56 /eight put
pop
%ADOEndSubsetFont
/ATVQTW+CMR10*1 
[/.notdef /Delta 46{/.notdef}rp /zero /one /two /three /four 
/five /six /.notdef /eight /.notdef /colon 8{/.notdef}rp /C 
/D /E 11{/.notdef}rp /Q 2{/.notdef}rp /T /.notdef /V 
/W 3{/.notdef}rp /bracketleft /.notdef /bracketright 4{/.notdef}rp /b /c 
/d /e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef 
/n /.notdef /p 2{/.notdef}rp /s /t /u /v 
137{/.notdef}rp]
ATVQTW+CMR10 nf
ATVQTW+CMR10*1 [7.45644 0 0 -7.45644 0 0 ]msf
388.863 18.3201 mo
(d\001)
[4.13135 0 ]xsh
%ADOBeginSubsetFont: JAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
ATVQTY+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B751D5041DDABC011B22E2674EC9D2008402DC54EAC5EE3379
40D4E00C5876708EBFC0F089816A923F7414E12F4EC86FE029C9164FB00D37CE
3824BFB04DBE0C4C2733327610FB8442214C961F4823DCB09F8F2DF872A8CE22
62AC898EC0E84871D4EC8F51AF0892D628BA7C3C799F6D511F178BEE37A8BECE
AA043542F6F8FB29E710A79A7852CCE7858DA82878DF2512D738066A24C3F23D
5749E869C5C3A41524DE46794B0E3880C3C1C4EB7FF85447E9075DF4909C0859
7159F3848B34F8F9CB8E9A6A1B158B5BD9C5F03DD569D590DA5F215711D7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ATVQTY+CMMI10 /Encoding get
dup 121 /y put
pop
%ADOEndSubsetFont
/ATVQTY+CMMI10*1 
[22{/.notdef}rp /mu /nu 3{/.notdef}rp /sigma 49{/.notdef}rp /M 28{/.notdef}rp 
/j 14{/.notdef}rp /y 134{/.notdef}rp]
ATVQTY+CMMI10 nf
ATVQTY+CMMI10*1 [7.45644 0 0 -7.45644 0 0 ]msf
399.192 18.3201 mo
(y)sh
ATVQUA+CMMI7*1 [5.21951 0 0 -5.21951 0 0 ]msf
402.874 19.3979 mo
(jj)
[2.69452 0 ]xsh
%ADOBeginSubsetFont: WBAAAA+CMR12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /WBAAAA+CMR12 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMR12.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 91 /bracketleft put
dup 93 /bracketright put
dup 98 /b put
dup 102 /f put
def
/FontBBox {-34 -251 988 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 446 665 675 683 704] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [29] def
/StdVW [65] def
/StemSnapH [20 29] def
/StemSnapV [65 81] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/bracketleft <1C60D8A8C9B85D12C7FD88E8AD27D833610E68BB75FC7EF16D
E4512BB7B8C5E0364FD7BFC585BA3A363373F5> |-
/bracketright <1C60D8A8C9B85D12C7FD88E8AD27D833610C8BBFA865BE498
B32F4578F9F69458BD31BBA5089DD1A8F61A0DF> |-
/b <1C60D8A8C9B79C5F973E01663BD36EF6A8BF02D069A7EE989ECF5D0393F4
00A4CC7FFE9B00309A44B53B429855D059F1EB9BD1DBFB0DF9195F931EF7EA54
91C8D43611A22051624BF1706B27EC567B49209039693A163969C46FF4B733DB
455CE95724C0864BD36065B5C636D55BF0A13C932633643B396D215B6D38EC9A
AB9ACE862F66BC4A199E> |-
/f <1C60D8A8C9B8418669523E84D09FFECF53410DB70379DEC38D02232E0746
4685F3EC78C4446599065FF58DDFB8E548ECFC904A52B6282F09EB547C303AA4
92145B455F05A013C3831043B4015F3586892E8FABEF1DC9D0F105AADC0DC2D8
990057E512587B8BE3CDEB9A7989AB6F6D4F3E13C1AD2A318450BB6E19462D24
D7E11A62477410758B92BFAC5FFDEAB6A843A599C5441B39BC> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ATVQUE+CMR12 /WBAAAA+CMR12 findfont ct_VMDictPut
/ATVQUE+CMR12*1 
[91{/.notdef}rp /bracketleft /.notdef /bracketright 4{/.notdef}rp /b 3{/.notdef}rp /f 
153{/.notdef}rp]
ATVQUE+CMR12 nf
ATVQUE+CMR12*1 [10.7373 0 0 -10.7373 0 0 ]msf
411.406 14.6378 mo
([fb])
[2.96378 3.23322 5.8378 0 ]xsh
ATVQTW+CMR10*1 [8.1648 0 0 -8.1648 0 0 ]msf
332.281 187.708 mo
(\001)sh
ATVQTY+CMMI10*1 [8.1648 0 0 -8.1648 0 0 ]msf
339.107 187.708 mo
(y)sh
ATVQUD+CMMI8*1 [5.96515 0 0 -5.96515 0 0 ]msf
343.148 188.965 mo
(jj)
[2.96368 0 ]xsh
ATVQTW+CMR10*1 [7.45644 0 0 -7.45644 0 0 ]msf
418.771 173.068 mo
(14)
[3.77213 0 ]xsh
393.623 173.068 mo
(12)
[3.77213 0 ]xsh
368.475 173.068 mo
(10)
[3.77213 0 ]xsh
345.214 173.068 mo
(8)sh
320.066 173.068 mo
(6)sh
294.919 173.068 mo
(4)sh
269.771 173.068 mo
(2)sh
244.623 173.068 mo
(0)sh
ATVQTW+CMR10*1 [8.1648 0 0 -8.1648 0 0 ]msf
233.846 20.9253 mo
(25)
[4.04156 0 ]xsh
233.846 49.755 mo
(20)
[4.04156 0 ]xsh
233.846 78.5847 mo
(15)
[4.04156 0 ]xsh
233.846 107.504 mo
(10)
[4.04156 0 ]xsh
237.977 136.334 mo
(5)sh
237.977 165.254 mo
(0)sh
0 0 0 1 cmyk
%ADOBeginSubsetFont: WBAAAA+CMR12 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
ATVQUE+CMR12 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Delta <1C60D8A8C9B6A283F4935F0C933B0CF744B1E2AFDD94DE18D0FE5F72
EBB5584ED8C927B8FD50D5B8D10FEAD23D51E01EF2BEB4E9C1EDB3FAC4404FC9
14722BBE5D467C79FF2A4E37D6F72798064584ED103BC0739EE0> |-
/ff <1C60D8A8C9B7E02AD63E2E42680076032EFE757DC8558CB763655928515
94FBD17ECEB3EB8222D1EAF7E0BD7B64C6E643F59F306D34EBF6C680605136CE
36DCF854FB428F593CFE5B39ABE44A55C7EB7C02B81ED4BC8AA9E51204EDAD66
56B278A19B2376FBBE021134D5DC6D52FA1D11C12A72CD1EF898781C069350AD
6D31CC7831A527963FB88BE0CB3891D9F610140EC2DF3E05C4CA403676ACBCA1
455C1DF3FFC7AD4222C9B0AD031F004286EF57E1C5FA2A0C73B2F6C24245E376
E988FD231C6072DD560BB857740F4DB3C3DF2E96FF3095C4C6AF3195213926AE
3A9D26A85C544A5982FB72A539D2F5F72D106C40440ED18CFC4F3210A2241874
C5C7D6815E8D7189D79FE024C393E1B3303110F10EC> |-
/fi <1C60D8A8C9B79C5F9DD058B925D920160DCEF4DBC92B1BBB5698061C5BA
FC36A09EB46E7F7E4D1E8203089F2301D7B37FB93B0746C243E3589CF7FE7F3B
C64CC053DB4E99D5409F2C3C2B2012B846FB8A4AEE3CB96761AB76965B0C2756
85B3000574D8808C38655F28659C728A4038EB08F54AA9833223B2C34434082D
DC41F4DC2ED9A5BA3CA4D12A1572B3F52A533D46DAF16A9EE4EE5ABC4E462DF1
7562255B559BB6AFA38BBB32EEFBC114DAB9D301B80390A1DDAE9219737F0E7B
8C6198CC71EE6C540B3412473954E91E9586ACA4D8B2D3C11247ED089119B047
8B542CFD659A91A> |-
/percent <1C60D8A8C9B6A2832C616ACA4B39B0DAEDA761343C246D19E6FD35
02CDA3625E2081CAD92999DE138E67F281AC27ED01DECFD9CC306892B22D486A
A64EFCAF69BC1F86B02BAA429A65DFD6D0BC41B51A730B5A120AD73C9D38269A
65D8D79461FBCF5FB17503335BB1913FD99A5F61ECE9999BBFEE84082FC75CCB
2F3886C9C28B3F7362B6A8F50D1CDD15E42C5D2F5A4C1717FE63E5FBA9162349
FD1FC037E950D74D2FE95E37355FC0709ACB055267F2B0742B63E4B1CEF3DF28
9483B43EB73A1759610D1E24A328031127F492C50A34E39F23ECAE3BB4745717
CC6D96A025EF243FA34355FF3CCE1DC1> |-
/parenleft <1C60D8A8C9B73F59DC1736782E4C1C19EDD64255E2393C5024B2
8DF3DAD1F658B414FFC7F6340C09154655276EBE3A864FAA5F25254ADD1D66AD
32F6F0ED72B2779D8B9CBC436F290A3FD41D2FEAF5BB166225967C60AC032644
61C3B610DAE07B90E04CD1> |-
/parenright <1C60D8A8C9B73F59DC1736782E4C1C19F750FC29D76AE903C84
F39596182123C2F9BBABDCD183CD0A7F2DCF7F475747A3C66A218A2ACC372926
7893607CC6D4EBAC9D3F2D1F9916BC173F64DE0D89D4D55EAF7634E8836B2C24
5A5674692FCF9DAC6CD845FC5E88E> |-
/comma <1C60D8A8C9B85D12C7267AF0D2F66AB4AC257C1635F0E44214A585DB
73B4A5021B7586C9A17E4BEB60731C6D7DA02A5C6E2DB1FBCEE64335DA64C8CB
C4291E527F4444DDFE71E69CC854D1966A8E77591AE04236> |-
/hyphen <1C60D8A8C9B82424A9C89C4F9B2EA301917DC41B2F6B065AA459E86
8BF5F> |-
/period <1C60D8A8C9B85D12B760F96B699981ADCB57A7D673D446BE57B8C9B
CADDF9A80034920FA8DD7ED00> |-
/zero <1C60D8A8C9B752ABCA93999A026DBF99AAD8904D1DDB4E57C113FC7C4
BB860A57D51CF4E3751ED57B3101A17AA1B5671A1C015D5C75D8FEB922BD1774
20EAB3C957481DA4E4963ACF84BF9FC50697C050F334164800BFDE7711618591
B1F831B7E866F65D098B3FE084D7C62B127F713D632621D7D805D4B9DC728D9D
E8EB464A7CFE042C184593D33015AE1308E4B413209F42702D5> |-
/one <1C60D8A8C9B752AB372B1338726DAE50702AE3FC3505C230AA8B538E88
A64BC50555C15C4F9C1C8D25ACFD4CFF046EBC17B6B6CE5B6DDF472F018C84C2
D8CA302ED5402A29C0899E66EA3A4575040CA2E8AB00A92CB377A30E0A8E01C5
5A1866557B8C8E354DD627142F4AFBA8F01617> |-
/two <1C60D8A8C9B752AB3751B7115F440B017A800C9966F9D6C8D899B69B53
5555547C6BA24B6E1F046DE16579F205857804134562B1E66D1B74F5C065BE47
58EAA51BE86F23919207272A8508C865B8FC972FA5EECD6D618D03C944A0B510
56C9A643AEE9E15B7819729DCB8546556AE1AA15DC7D1BB3C46B74A340814C18
94F0D8820D897F> |-
/three <1C60D8A8C9B752ABCAAA2553B55F086D1BB58BB32453103A8E6B1FA2
DBDACBE050C48980396DC5ACE2C287ED03971640573BE0208377E56C3C4ED937
B36C95E2F32624AC435B310C6F4355C4117979B156D6CCE3A60ABD1942231ED6
604ECF92CC6EC70A747880800FD5DF0A89C382F8F0F1AFF89650D8A8B7527345
3849878370F47D811AB6FDEDC7EC8C471A34C93185F3EBC8C12B9D9DB8C1C393
3FE33724E01B6FA30C526152E3BAE4A818> |-
/four <1C60D8A8C9B752AB372B1337EF5EBE50E7EE0D842EC88506CC8578384
EE51E179BB6AEA746475FEACAF798CD6C14693A1E8D3EE2FEF9BD6B47B43A239
7A24D50A7F1ABF1FEE4596D279C197E1CE889DDEB64563C8AC2828DDDB10F3D4
DE2B961879557873D221803B8BA674159AA7A2D6B96A7E476437ED08DA5B776B
B24078F6888> |-
/five <1C60D8A8C9B752ABCAAA254E5D87FCEAB6A0AE2B8052A7BEE91D3A65F
575EE4B3B66296C0FE52EA82CE011CF61C01B6A605CD47A5F6A10F9A4E21D792
57A513D084EB04BB5AC6A06F1C7B044EA4769F93193E4526D5AA704F93CDFB19
EC0E1FEFDBFECCA93D26919EE1DEA3E9D21B9BBE6473D9D0C84AFAE56833A7C6
A724DAE6294B8218D36689219603A3A1CC8F24F42576EEE325B8970F582A898E
AC65A50F6F13F284ADC24DFB12DA5162556FAFAA1E0644E0CE4F567272CAB0D6
0E2783CDCC2D13299> |-
/six <1C60D8A8C9B752ABCAAA2541FEC0FBA7ADC419C93DEA2D2BC334E3FD73
85D9FBC525C8DBFD8589180774EE915ED9218E721B2C38BED311281AF71A9604
39C391CAA3CA0CF54C1E6ADEF5F198E64A815D08679CBC939EC73944B6195C70
A72A0CB539D62D60B95C6FC8BA2CCA97DA773DBABFE7E84F298426A359F22E3E
FDD2F103A247B4DD64636648AABC364866FE3207DB6002E295362E81EB91BAE1
391636> |-
/seven <1C60D8A8C9B752ABCAACC01234363602A5DA369D8A7A2C812791E02E
A813877A36B1730DD3FFD45969B68012F0879EE39F1A61BC6B6835FBF38F58E3
851A97A338BA8F54219ED092B96AC1D5F9979038F8C5A89BAB5E7AF7AEC2A1F8
BBBBBD42791F3801BDF5> |-
/eight <1C60D8A8C9B752ABCAAA254013E407A97D70A29B42111B68E1DE5071
886BC20B7C6030A274274DE198BFAC910DDCE54879F9BD8ACEB6DDFB90834D82
F9F63417B62DA7C41E4D84FEB0626FBC81833949B046BC8BC98E28A057F096B9
8837D543962377C2660B63EBF1BB60C0AFE409933135145EC05254BF80DA60D3
19B745B0345529BA02FA08CABA0BDC8B8C1057C4097D> |-
/nine <1C60D8A8C9B752ABCAAA250E6976A0D9A065CEA7CB74BCD7E9A439BC2
F6A15238DEE30DEC62553881D01828A2966DF608D4E9018A0CFF35F9C5C3F0A7
458614F3851D293EBF4B480AA28B6AA543F65B56B0DC545BC4D58FA42D497D6E
7E1335D3DA07D2236EBE19E26C0625FAEA451DCB9FEF5CD1F3A8B0AA58C5DCD9
154FFE64FB37BC559C09DA47E1CA6F60DB08BE4537877006DB3EF7A48FC87F3B
09A175306> |-
/colon <1C60D8A8C9B85D12B760F97E35CE56A4095E9F7AA1A00656E95C0DD5
2F4E15A0283B28A01742D3598E509B6264639DC3B168E3F06534E138A11F64F5
2DCAA93297CC1E84D3> |-
/equal <1C60D8A8C9B6EC349A8886189F14557AE5AE1BE54B8844DBBD5FFC11
85002109161E9CDDBCF6C766068263974B75D4C50D73DF79CFBCF5B5F02880B0
97537282A41165A8E9A961F3C9F162CE7D46C9> |-
/A <1C60D8A8C9B613326598F7657C1643B36DF4E6D431FD668445BB11FE3980
88DEE5A41C4AFFA403F0B7993B417EB7B3B15FEBEFE16C348F00B50710577245
EC5725E9F7A6AAD22231B018526DFA67DBA7FB9A721F767D3ACD10D72F32D53B
38D4ABB201E09E6F027C714F91F99425AAFDD762AAF18CF265F105D8EFB608F6
715CBA54F412965937F206A97D76A83E24CEECA3EF6DFFED913B8A8C5BAFEAC7
265BC56D1F6D1BA43E0BCCDCBA7B1982A76772F66F244B6DC5AE7E4FE4D33217
F407CABB06> |-
/B <1C60D8A8C9B628230B2400E451D7BEDBEB5988CEE1051B4AB6DFE34F7ED0
39B657DA21A0BEF19E3DDCB8799D6DB5392BC5EE694B8D27DB02E5D00987FE97
E3C9DDED241A83A75515A6F00799DDCEBF82CF91866CE2B0A5786D289BC8BC56
EE530B75EFE400436E3B9F796BA5C1D287AF58B8541DF4039A959B39B3866D06
941918675E6FC2470B324A07> |-
/C <1C60D8A8C9B63675661CD72152C956C1BF3F712A4AA84AA15AC0793ED42D
2409B18F59974E7734DDC9A69FBDECA41B7C6AC6E25D3317705D8359144B2DF5
1FC6B2386EE786064B2F0180A06B116949BF6F24FE248F032F8557F9CDA56336
27A94CCD6C68FA72FA56490EDAED1C95DE25D9CFB9CD31CEEF7368585B9D5FCC
53E03E7A> |-
/D <1C60D8A8C9B61E131A379F703B1B69D52D675B31593503FE296FE78E006B
B74496A284F09149FB1BA58DCF764F92F39E1BAC4ED5422709960E05C205D3E4
C474CC6C7A88D190491AA7E00E9CAF5C8E1134444BC7DCC2B3FF3811878EC867
3471000FD154F644FDBC9BB368DCB570A96B04DDF32361575370> |-
/E <1C60D8A8C9B64FADC67A3B29F1AD98CA242674984D6E7901B01ED8DB90F0
9D99AA7AB11126C1B3D48B7D0FED339D66F47100C20407723CF7157A740502DC
D70C242C8BD6339E5F6DC96CBCF8B762B5ED3F971EDF92F7C1381442A4DB0135
5F8FEFEB9FD75EEFE875FF0D111A2FD02AFEAD5276BAB56D51FCEBBB177D0E10
08DAB161> |-
/F <1C60D8A8C9B672D450D6DAA518819E227C353EA137D1B3E0FADF23EFEEBA
912CEE2D2ECB468D04F2FDFFABE14B32446731B810B773BCF7B2671BF3E13094
5DC57674292BE961FE5669AD0098B97F02363FDCB6541824BD6C856BA7928C1A
3CB8ECCBADD83C2D41263258AC3CED3F6F639528E79972376E491309F4F09D95
FCD70D55BB7A7452C313E6B7B87F22FE09B9180501A4F1C63DF08E> |-
/G <1C60D8A8C9B6F57665638726699F50A7578A54CEA9006C25AD570C65B411
C72DC94423125D648F92EA391D7E6CB19C13370673E23571EF00B0DE03F34FBF
493CA0FB8EF3B0B284254A8F6DD169F87B9B8589035F2556396C31EB3C9CDE11
43FE2D20C5E41E64C1239B4813F0A161E029F6B7142D83C12CE556FC04B4D9B3
6D1A58E070204A489570B9270A5D9898B68E364940BA2B790E6C62ADBE92355E
111B9AF6CD9299373BCCEDB15D5563224757497BB610921AD3847B820793AEB0
3A6DE454> |-
/H <1C60D8A8C9B613326598F765E87CA7F73A88B6B01EFBD284EE1D492D4E6F
EBBBFFD4BD4659EC2849BCBE78FBCD84C756317C0517619513C71174725F34B4
FDFD128324BC145A30F59A2333D4210BD9311158E339392D168176420EBD73AE
5BF780F087E107E2A64F8046CC71D0BF9903C11120A7E3C189E893F9D45D290D
DD6B18FED1D1794A2CA41B640D76668475B97EACB03CB90E0DE1CB1F188B439A
B65B3FB947E42C8CD7E82FA7FFFFD4290B33A1061D0C58E4C6C38E1C6C96E4EA
99AE3D4034D63F403585900946DBF1B5A0F450B7BEE5BD6BA7A1B469C5CB0D8A
1E8991FE5ED77EB2BAF30A0F019C4B91D9E7C45C5397CED59E2039E6C8A174F3
65A0FB4286F0BFA8A26A35451D387A51C1F836CA8D6CA61EEAEC87E082D58402
727E> |-
/I <1C60D8A8C9B80B0D35EAF2576580588E3ACCE36152315C2F79801F37B4C8
AF400BDC994AB185C70443425A1DCB84A6F1E3F0B1AF92030AE806577BC3C7CD
4E340169BCDC8CC6B691537B690CACE2884998C24502A9F8208C758E91D576C2
3858B00FE4334348CB63A3694EC92FD7804A80B0A73C1B33091D11EDAA421B5E
72A1D4A15CEA810C1EA85CBB25995DCCC7C512> |-
/L <1C60D8A8C9B7D8BE6A7720908CD7975F30A0327FB3669E6EA89B3C5E3BAF
C4543361DAB5C1C251CE6CB6FBBA59126CBE315D30C095400B410A8307AAD749
A1BBBCDB062758BBB170F051FD5309EAA2E140A8056FD28DF145BC5B079B56EB
FBD61C05DB0307B9F9A303BCA5CDA6F1A73EFA4CEED8AD50DA93> |-
/M <1C60D8A8C9B587231BD32234B47CD93235012A3BC068156B00A427D15147
D2FC8687F1C722E8AF7AC72352344B0D2F3D705331D743CEF59C9589B1F1834C
3EE8695FCBF0B85371F3D9E8190A24C0B65C17398947726A3B3F278E22E78417
C9E1CD5FD816C01FEAF0C445A0496A51D320B44FC54AA0581C256AA34DB4DEB9
BE0358796FAF238FAAAE407073A35D34018AAFFB327A94ED4E80FB2A40E4DD50
6CB1EBF7A05DD0796298B3B3A07104FCFEF148517B1A71A0DDB1D0223A5D087B
C6DAA49BDB007CB6C7A8A3A3B9E4FE04DEFB73CE63157CB310DC1A7DB9D12050
58> |-
/N <1C60D8A8C9B613326598F76BFA5EBCD323BAB5855AE2D6B7820227C94EBD
A0D53670D7BFBBF4AD7FF411C5546797302C1D6EA966D926476317690CF25ECA
70D239C03F61249F96A5790509601110A6CCAADAB37EBE6C0930ACB30113CB15
14B344A6F5AE0E03814C15B82BE4215D85019D8593B8C83F7B4BC7C0D922478B
78440E3376961613BA61DAA3B42F74546F57553EBC8C10B73BFAE0D3CAA8B8DA
81650EFB065AB05B7EDBC12B4B7836CCE2D32C717AA515F4E05FADCA7A6F622F
0A93> |-
/O <1C60D8A8C9B6EC341B8CD4B367E669615A6CBC57290754BD982CB5B55218
FC540EE7C13973F8FDDA1EB2C3B437041BF839CE327FF47D87C96D727F4916EE
6096252655BD3390FE62D8BD4F3103B06AB249CAE0B1B25A25C6655B0A98D330
7BCBED8D2D> |-
/Q <1C60D8A8C9B6EC34960BE9940CFD80679AD2C223AFFB07B7DD5B06118312
2AB43BAAF79A7F055D55DF0531A2BB48C655759CB28D81A28B6B05A873A796C1
A541C07EB623F5BA120AE056B464DBF7F106C23F9D93210FBE25CF0C1AA7057E
5BE7B6747082EB079E82F475F81B5636800B7860E8611B52714D5847408743D5
7359474670E970195728C5187BB63BB184CCE29F8AD113B407F2B796D1DE1010
D8CDA2C2A630819E5C7A037ED878BD85FD18D80A96B87065F3563A76933F2B10
BD4043FE8EC57605F52A79E718F81B3883> |-
/S <1C60D8A8C9B79C5F60E074FC484CE30A747880B5044B7D08F15D2D72D687
D666DA0E65CB5A3BFE0BA26E32D9FD8192E0FAA98FE55C845729DFF9F526267B
E8F9F2B7A9ACEA81814A9137C11214BF27EB0F271EF6260AAA5DFAFCF249D04D
4EACED86E5B9EF95963F1229988F8D2D50A7E56937D20EDBB65B7F8004DC7436
6B6BE3759AFF224B2CEA96C906AF65F142304DC32938F019F70AB88E3C052B17
22EF7690AF238743BCE85F33B8D27EC937C8DE80D8F709D47FCEA861F85383CA
11FAFA862CC2EAC3EF7B16FE> |-
/T <1C60D8A8C9B636759BD93531AB0B3EF3EFDA8DE57E25CF2BD120D247F052
CB5532AD3820C7277E685BF514860F5CDF32B2BD61E2A2E2C448F17D6A1DCFD2
A3FFC51C643B084662CD90DB5293FB713F328DB88F83EFA6473829825049E247
084809068C3BEA0934725D86ADF7341FB9CAFA6ECBBE334D05273A8ADB024991
FD52A37173D8E966AEDCA718E806924108902F455A> |-
/V <1C60D8A8C9B6133298EFE19F514169B2EEE3921BA985C912ACD4DFFC89D3
7D3567FBDBA9FC5A6D76764A644273BABD55426A7A2644610214E658FDA0B94F
B8AC3638B6E2AB4C5E8789911C8358C5EC6165AE6BC0FEB4D7624C7BA972D4F0
0A8A1B4339A4F31AF7AB245E3F2988DC672A288B713A1F2E5C02E1887D9F732F
8003341F35D9528B74F85995215D02CD87081A743E292CC7171CC16E8238EC81
68CA61444C97B8F5B7E373DB1169291C5496026691EAF8> |-
/W <1C60D8A8C9B5103408923A34BDCF09CB1E06F2E488AD22C08C8F31A7267D
395CAA6B63951C3CCBECF4FC507E70437B42098307054C203FD0E3315ADCE788
FE64C6F837AC33E372C8F1AE125E8C739E4C43FD902716925783EF96AC79093E
AFAB43F582E1E9A45DC1B7D171773DEBCC2B85EF9F9B7BED789248F8CEB4540D
36E9B38F030DC7376AC3BABEB54A40EC979476FB4676BC6EB255EB5EB542EB62
09835FB6C3BBDF56A84AB2287B8C04E8C1F92C70BC24764A59468C5DFCBCDC16
85C44D1FA69BA9600A0B4734A2C2CD77E2A9CB0BB678C3FDD5360B244757CDD3
BC356889479AB808C0DB0C00920409323390CC02D12D02761300538E8D1ED6A4
89593B5CFCC7EDF3214E8B7D2B6FDD924DB193E094825789176B4CA4BE7B4F> |-
/a <1C60D8A8C9B752AB3DC5DF79137F171AB577EC746E9985BD1DE96837CEF1
DEA48D7D27260C7C7322F99E4296B839C62F65A64E636BC474CE2239895BE865
6790A0C5CA6031741B0F7FABFF0A46B85CB2914D6506539949EE96DF76832885
6311BCC165C9E04D0C64F4698152B28ECBF186E6D19CF18C2535D7AFD403DD42
BDCC8DAD14BDCC9C9A4F278509AB5C49AE5DB321EED2831122881D8D62586149
EF7F> |-
/c <1C60D8A8C9B7686E50B91A103C25982F9A302EA4F8141240DCC661C74F88
5E7E26E132F04A32F771AF1E981D85F2F45479CE056A7979B5D31D6ACDE50657
395AA1E0804FC72234B35D73160EC1DB8AC3DC589CD9CD13254678243B8E8AFF
A7C9C49116F9C3FD5CFBBEEBE8EFE08DFB00> |-
/d <1C60D8A8C9B79C5F973E01663BD36EF6A8BF028D4B0A7A4D9A6B1D8F8010
C50CB86E629F9BA29716CB03A29B62B2BC55176F9023051921DDD1ABA12B2D19
31F5305D2F2C6A93A518F54BAB51C13B6E7278B0BF99D06C13B9ED52D0A2FE43
A7DA2672E57649FA06D9304D05278701CCD983A0F2E5F0F077D1FA728F1AFE6F
10AE3152B97E4D2200C0E44E2F1A83> |-
/e <1C60D8A8C9B7686E50B91A10F4C805B90007B8ED9F69CD2ABB860BC6B4C2
4ADD309DD878EF1585F238AE8F9D91356FA3239D5176BBB7DB2E85C191C46227
879B3BF7D3968B6A2DF76C157A7C772E03B2D4C63BD69B1201900C6BD10D61A3
ACE648AF080836F4E237C1FE890558DD8376> |-
/g <1C60D8A8C9B752AB470B4A9661AD18D19A581C4D690EDDD4100E53B28E9F
7BBEDEAA1385B79045B700DEA568C3019E5C596E7A66C5BC825F40CE296C60F1
B092B5BB14AFFFAFC76A328AC29586AC90AAB636CC004C7ED9FBF40060B03EED
A84B8C35DE7A42F46EEF6201A70FE64C1DF3B9689FDFC6452A26797E5D5B28F0
314F337B3ABD23CD4B5C8ABC1D39DA1F56BC8A5D8E6BAEB4DF785AE9CB937C45
B0390FC706BE0196DADFEB0D01F7F2BE059EE99CFF11EB45B089108526DA6402
A0E965D58457B51B3E9964B87513B82E9A621770523EE5CD42171AEDF8901601
746780534133C2F8427ADD19CBC6B5800A44F412C931DF053A5A5E60930FE127
6D661D1D1E1BCEB08D8536C6E9> |-
/h <1C60D8A8C9B79C5F9DD058B93AC67891D0EF62C068BBE0C9778A4B557364
657A2B3EAB237FC048CA9C206978D503894899312F16BD4CBC29CC5BDFD5B339
254228D699CD4175C78CD950F4E4603A391782A54AC11469A046EF0D6D3F5309
C2CDA02F1B4274291B5D220666709FF904C69EB458DC0177486F120A6C94934A
2612EB90583911C0EBFDE4B13B93D4A8398BA491F43100EB77D827E54C705CAB
DA9C3EC30E637394FABD07404DF1CD0153873157B7AD181B1FB8A151CD17A7C3
D021980D71289AB5> |-
/i <1C60D8A8C9B85D12B724967C6CB76D0959368207B4342C19CE1B9EC1C979
AFE39945CDB07DCB68293DEF3F9F5B5DDD81F9245C20D5895AB44AE881F948D9
AA2C98FD220B63C8E09F1AB810D64CA173E795C253747F5788C563CE245C4123
BABA356BA9A298ED2228E0B30341F78270B1D0D1ECB7ED7474C78F> |-
/j <1C60D8A8C9B841861918A665C0D6C0AED83E5A1A2D84359F2EF8811CF5B1
2193158DD1993AA00AA79889EDD4BA8958DA823A368A7ADA50054C1D3EBF1AA7
00E617D60785E6B65CD9E8C9805A1A9090618E9AB7524998A34273D8CF89D3A9
63C0B123E4B70E8D5E088BD0865CFD968B4F824011DE> |-
/k <1C60D8A8C9B7B71A30F4AAE592D95FFEBD9656B7569E4BE8065B9AFC7309
23A9905CB2D34EB2B68358CFAF19484A87F6BC10294C86F6A89E328035AD3064
3DFA4B6A99EFA1FBCF64CAA1B436BD6D9AFDB2F27062AA2CB56C5B1BE932FFAD
DA8763392FBD91992445C47311B776BC2081F88B3C734F4B23F1B4EF6A7CDBCC
885E3B4066AE2620591C23699E97226A2A6295CF7AF4F672D6972D22F99A37ED
50C7FD9337393CAEC3A49C85F8F9A25B1B7629D2D7FC5482EC37B3C0D2155A58
E81315F2D3F5F82E378CA0CF78B263B86DBA2D46D2CF5BFAA3310EF76E806935
0A67CB2F7C3188D56DA2F127A84DDCEBDA39EF08BE960D478A17C3> |-
/l <1C60D8A8C9B85D12B724967D35F648783331BBC1EE8DB5003079F7430DA4
3E81BBC7468DA6B1B45BE0E5907E1FD60F6A47B1CFDFF488C6309642616C183A
B49CEE81F55EF5087AB0E56404FBB1395EDD51A084257E4A1ADB8135145C> |-
/m <1C60D8A8C9B6A283F4EB5501E844D64BB572593EEC81ED7AA71ECB3BBDAD
BE13E6279053162F2CB972F54175F0029E06B129DFB4D2767899435CADF3E23B
5C4F3885FD27F1C3EE8781D7701A81F8D660DF2B382F4D106734F322FA2D9117
9752BD4EC994415FB391F5EAA268C73470C910821D3D1B8CFFF35DB71A9EFE2A
C9FDC5078407470B6DBEA58374A435FF0C7A79C5BA97F8FD34E8DA490F7E319F
0F221511320466C0B8DDEDEFDDF79687FD0B80E24E593B23C6DB7B103153E219
376395593E6C596DFE2043827971C9A76156653A4DECB415098851B9A24C0F33
C5A4D9E783FF33BA2A306AAD992CA2A87F7A761DD9128FD13DA8531266C0DEA9
5C2401F51CC2134A75242C0CC85BFE8448FD7C5ED74DC85662E3> |-
/n <1C60D8A8C9B79C5F9DD058B93AC6789F3CBB814BFC1F00EDB54718B73939
28D3B2265CD93D424660C039425CBA4398983D3A3E0B2F08E4ECAAC3A11CEE6A
A91394591D10563F18B25C1714DF0FF3721666094230FA4F024DEE11AC8130DA
2FCE9082EBB1BDBAD74BEA1646226506565238B4B08B6317D554CCC162155DA4
CAC5F0A99B2D53A7B6A1D2819C65F282360783E5114E4B70FA9BB0E38436A61E
F9BC341E7A8D15474081F3D30667FD4E969668F84544C7B939C80D37CF321730
8F8868> |-
/o <1C60D8A8C9B752AB3DFB68D30F19F1CA9272CDB5ACB821A6F71A9CC34429
38CF6346EFA7660C66DA069F5EBDC24067D57DFFC05D80799E177A95094BFCA6
7A276154D6CBA4C1E5D133279DB5B2E0A865041C00DB37E8AF5290A042E49141
2C351C8C067D23CD2917758C0BCC7C9DAFE0DE1029A6C28786> |-
/p <1C60D8A8C9B79C5FEDAC3A5356612CABCD4B9B1627D68462987B7A70A6F7
3E962D75C0768D4251A1A9D7D2337D7BBECE040BEC6CE049708ED932D339620D
1B8715D1596A1865F43ABB89A0C1B60EB8D33E9DCA285F730839BEC55CE38C57
C17862D101F34E39EFFAD28CAC702FF76E283D09625FCCA7E3A1E34ED19135AF
7AACEAD2ADC4454A31D80873574D5E5E5331CE826316DB0221E51ECA76C5DD73
AD0B85B75ACCFC6C8370EA3C7ECCBFAD28F838> |-
/q <1C60D8A8C9B7B71A401529639E6CEC0BC5F178156F825872933D78804EEB
CA737D2006FFA3364D8326D632DB5B14266ADF36DA6E2624FB3A794E80526E17
555004EE7B8A9A3F24F67FAF54782E0EEC0D6DC762B03070D42393B9D9F54385
9E0450D20FE38EF74DC4886409DCC3C03CAA4C655F0EA9C1E58BCAE0F34CBF64
692BC21726F2A8CD409287A1A1C82A6C8F45C1C00E12231BD9A678151DADA4E9
A6> |-
/r <1C60D8A8C9B73F59AC4C5EA853B4E2F03C64C0C05FD52BC33122FCCA4BFD
51EB9E09AC5195D025A282E25ADC995FA462E62BFD3FBB78FCF4F94F52F42782
F1036F93757E7816AB901DD476C8DB29DFD76A8F977E55D47316848B4CBB9C2E
9C231E1377AEA3E4ABB6343871DED0448700F525D58C2DDE58DACF835ADC433B
D339598286578A85E865AA10027CFEFDE957> |-
/s <1C60D8A8C9B7397095546C4A386811A909F264178C102E37E91BC31B924D
9B3178CC879F813C9FBB28DDFAFB5E4DB00AB47969517F6CA9E4D009805CCA02
704F29F1D897E47248614C06B38AB9A6CC2CEE2ABD4589B792535C94946347E1
92BCD5837CE43D7ADDA9D020C9042E829DE580CEC30A08C16AC2D87AF6B276C3
A330306CED37BE405496AC7E42FA5ED43499AD61FCD13817A426BD247F0B326A
A7AE4D4BC1AB9BB25568BB7CBC493F05A0BA6E2659752A4C90130ADF1F0C148F
A36155> |-
/t <1C60D8A8C9B73F59A6AC2B53C00F251FAA3807B287449C6CE7B1D574F127
75168A2081C70118BD346A2CBA3F46FA00F6475C5B747F4FFE0350AC63B6F034
A86CAAC4C0E72D751CC6FA6AAFAF7EEB756D424FBA69667E00> |-
/u <1C60D8A8C9B79C5F973E0166279F70672EBC89841EA2F6C6916249FF7730
FDFB878E3685E5C001D8E6D0F7D826F009D3FC8EFCE4B248B62100A438B6E5EB
2E9B4B75853ADF8C25B6B3965D080DC9A3EDBE25DAC5D4D23A3E962A425C4720
2B665CCA8F038084193F908BB9BE29956E> |-
/v <1C60D8A8C9B7B71A3ACC73FAC83C2D25ACEF087890157917D2964E038B48
6372C83793522755C297FCB24415E513C906D62889A36D4326F50C561388E03D
3F2A5E15E278F275546A234452F840E33F6A39738B25E04811953E3E631AF95E
CF8F5A0361C12ED7AF0017887A3964C840B041FA3FFDFDB5036504AEE3696DE5
E08CD4F9C06680C3D0DA69444DD8DD91A47C6C1908E43D4AF65567609F1DC8A2
8098A058A81326BBE0C46AB4CBED12A93154B3E137> |-
/w <1C60D8A8C9B6367591C005587708E42BDE65588BBEC4233514C6BD2ECAD7
D4BC65627304ED240CFB1B08FB1360A88844D55689A2DCE615E7A221F9961F1C
8958C6878E9FF5508472B0AA2859F9DEC7851DA4825686B31704CBF5739C40FC
9E1AF798372D02EBA37F60A600A32D4063D05B3137059FF095670902339BCD15
EDE40EB72AE3B51B80A47C0F1755BF1D6550A1FCFA76C08EA4AB817416E334C6
DFC77AA51C49487259FBBFA82994645FAE998F0F69C7ED0EC5C97DA88BB986CB
90F73BCE1B195B5B43A326286BF2507D0F0A3869D87FDA14B38C67B4F54E9B57
AD8201C9D464DEAE8D97C42B2742539EF8A9E7B94494F38E247E1DAA8ECB3FE5
B07660BF096D3283E9E7483CDDA2F6FB9748A5DF4329D0> |-
/x <1C60D8A8C9B7B71A30F4AAE597D2BC6E943C480392CBE393C8158B0E0D55
CD6AEB88851F7B47CFF473BC5F192599C09172BBC9FFC8858BCE2B4A3439AFCB
72628D658CC887FBEFC56B3F0B79852A127CEE5D6ABA11CA02BFC6538EDED537
01B795459E94DD08D3D62C21EFAF807FF422F47A2F0F96E389E28B406770420E
FD91AFFA2D47C86EA2344793DE85852D13D854CEC729D67651116BCDEB0A62C1
86657BF24028A0FA81F5E0B63BDF0F920576D68461C3FEB8CA73DCED6E8DD683
F48110922D8F157DA8CB21C8E05A717663B6937F1B03D0A195C417BE2289E2D5
70AB61355B641707E483FB54D197C606F6CDE4D3CCB2FE203D08CC27CE013A7B
2645866136466861ED9EA83CED1E81F60F3A4AFBDFE91646A177BC1A8790C862
36D2653ECDF731EE509D1F124BABD68F3E73693512C4E6E296CD9189ECE2C1C7
782A9B> |-
/y <1C60D8A8C9B7B71A402354816A787102A946B87C234C1D555BE26673230F
131F8D9E83D7285569459160FE8B997E3AA5762841C153B7CAE4E64E6614BB3E
44F200846EA6FE1DE38C1AA2ECDCA6EE1BDBA8F7E245B04FBE3465ECD69EB9C2
CECFE144ADAC18522E08B800657079170537209F60E5AB8E4E79C87A60D3293A
042DE87D89290C459B081C317590A95ED6AE48E8D4E6E64C1A8B74528B609180
A7CC544CA7CB6CB18D66021F02D2FA36987A7D8C9C4233344931FCA84B2ECA31
B03711880F3C01772CC49004235570DB7C98BC551C8B06ADB5> |-
/endash <1C60D8A8C9B752AB4B30B52233C610FC5FD25C6A18EFA06ABEBC5A0
7F01E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ATVQUE+CMR12 /Encoding get
dup 1 /Delta put
dup 11 /ff put
dup 12 /fi put
dup 37 /percent put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 61 /equal put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 81 /Q put
dup 83 /S put
dup 84 /T put
dup 86 /V put
dup 87 /W put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 123 /endash put
pop
%ADOEndSubsetFont
/ATVQUE+CMR12*1 
[/.notdef /Delta 9{/.notdef}rp /ff /fi 24{/.notdef}rp /percent 2{/.notdef}rp 
/parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero 
/one /two /three /four /five /six /seven /eight 
/nine /colon 2{/.notdef}rp /equal 3{/.notdef}rp /A /B /C 
/D /E /F /G /H /I 2{/.notdef}rp /L 
/M /N /O /.notdef /Q /.notdef /S /T 
/.notdef /V /W 3{/.notdef}rp /bracketleft /.notdef /bracketright 3{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i /j /k /l /m /n /o /p 
/q /r /s /t /u /v /w /x 
/y /.notdef /endash 132{/.notdef}rp]
ATVQUE+CMR12 nf
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
-11.6726 220.035 mo
(Figure2:)
[7.68011 3.23981 5.88 6.48 4.56007 9.72016 5.87999 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+CMTI12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PBAAAA+CMTI12 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMTI12.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 73 /I put
dup 81 /Q put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
def
/FontBBox {-36 -251 1103 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 441 664 666 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [29] def
/StdVW [63] def
/StemSnapH [20 29] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
34 dict dup begin
/parenleft <1C60D8A8C9B70B6BB6F4F43BFB90B81BE6EE740F75A2C7FC781C
E0A6BF38E5145AE9477017B59EB2EF73914339FCC975270D6A89768F43A7FA41
8BD570EE47E5B28CB4E747576CAF7EC19B11D1278A0DFBEAD71A523CF04A7A4B
DBC1DDEAB170B74326ABE8> |-
/parenright <1C60D8A8C9B70B6BB6F4F43BFB90B81BE618867F190BEEA8365
CDECB6A78719D915664C2791DB91396334AF34680CCE8305D504FF4C1E9EC8D0
5354DE09D7927CA8E0F2D3AB0C2249B4155C30444A9FF88064F172B37D72729F
93B9827C5> |-
/comma <1C60D8A8C9B83E2DB58BD45091A17574838C1D501D4FD779750BDAEF
8ABA8D1008FF531D2B4ED627BCAE88A80636AFB6B77E08C1DF670998772D3432
F18B621ED8326311AB82C90ECA3A> |-
/hyphen <1C60D8A8C9B80CC2BCD56356CAB0400CB9CF64F860CC3B3355E6D94
58BAD50356DFD5040D5C1B2411D72EF8736E15578C744B44A703F14CEF17708D
E1ABDD872> |-
/period <1C60D8A8C9B83E2DC52914D973F88870BFC025385D13C3D7DB1D070
7FDEE247DAA4A0F27749A5AE102> |-
/C <1C60D8A8C9B6317DF6DDBD86C7212DAEF84CF66C74E548D6D32AA2C1E2A6
9284C982A6E769A6296578592069C129F6214D7390F45248434547BDDDB0A67F
5FA2A01E04BF21426992A84F03F07236564FFC4EBFF3BBAAA9DD0783730EDFF0
F1E0340AE5A41AF2AC8AD18ADFACB19F2725B537FC29188CE8F6C29F161A34CA
876055B548790E341311DD85E0A9B512DC5ADB4EDDFBF553948EEC5BE0013420> |-
/D <1C60D8A8C9B6177404120BACDE9031F95B9173427E674626693440A4C102
FBEEC1E2BAC0413CCDF3F16AFA85B02C3A2E62301CE4BDF87ECF5F1601E83FFB
0345DFEA70C514690527D42340279D7814AC3B5841219501E25EAFA64D347B32
E845F1111385D2278642886F1FD7E2944A9BFDC6EBD2B6DE85E72B417B83413B
29E5E4F2C4E2649CF40600E1> |-
/E <1C60D8A8C9B64A956559F1134E73589A410542E6A9A21164C1C6A37DE3B1
615B3E4A7248CD4FE63ACC3A274768C9B592FCACEDA5FA5ACCFA9C75903E1362
79EEC067B4D4E5CA48381E13DFCE7F1B625EB77A768B3A19B2E6B6D460FB4681
64D397349B9DD84772F406E4DEB79756E7119C5F4547894BDCCA820E91DFFBE0
E6FC8CEF848189E8EF65770E35D4D2B5A8B0FF4D7A6694CAAA01F6F629B7A436
D8FF07558EFC32685AE2C2355350EA8DC626104414754822DBDF6704977EB11B
31B621FCBEE09DF1A166DF35D3EBFD67C139DA6298C573E155BCCB211F3D7E0C
03FAF4DE430E08A01B9B1C2ED291D1CCFF9E337FEF72834653291AABF6A38DCC
5DDDDD065FEC042CD6D7> |-
/I <1C60D8A8C9B723CD4650AE41298974697BB60511E8AFB4979EFEA49D9FEF
8EF7AA6C2573F433057EB9C93F3F78AF76254011CF4D9B8394670822A4252A08
9130C886E7A085148CAEED806299297FC48E9965700AE5B6CF3AB0F170D2140D
777414762160755F7FE32C05E2FD354C9BFE42F9F9B7C1D29AA5D9F1A80CFDB3
C0BC8EC73218BB567BFA91F6C966FFFE4F1159EBA43C41E7E8BABBD7D7FFB2A0
07C5D43EB7B7ABADBDD27DC197E1451A46195EA14F7A3F64F7C30FB4F998> |-
/Q <1C60D8A8C9B6E3FA53F7816A29BA5562FCCF5FA83BCBD4F16902C509121E
67B81085D3A059C56B24FA768057E2ADAB17B19896017FEFC16D11700CD44FF4
68E85BD4E3BA4A6E5821DB0A50DD820FEB6606051BD1B158EDE9C6C2D0C27DC4
73FBE47DFAABA53ACF2C8B71590B11D4620ABEFB017B2E4667C8E59A9DBDD50B
5A91564DA72CE93F33AE3FC12A95123F731B106CCDFA0218F8496261D66E2B05
CBCD97A34B3C5596C47C56B7C1F3EE6537C51DCF477E131228D98EA83BE4DE73
2958E2B01DDDFA84C321A1F7CA96150F27BDF11CC4C0BB5C37642675BB325ABD
E0ED48867639A043790AB8> |-
/W <1C60D8A8C9B5F6A29A6F50749C7C3DE9BF12906085407DB2F6DCFFC7EB17
A09376F6CD0DFCB7AD513FB62B6DDB87A3979B76F3D092B932FAF8453DB98678
F6E50064255199AF371D868CBB2D130F8E22E0AC6842959E02612477542DE6C7
7CC07FF1E8EE61DA2FEAFD1EA03B41BE8AD15BFCD79E8C96237364A7B36D8F88
A97698D589CD171302F04972AED89FB8B5BE655B65156418432533AEBE06D661
2E296BB919D2AF58DE1CA657F06F66362434148A166004F531A6FD6110AE664D
EECFA34E3BB78EEECAB7688D3C7488B2B59CBB3178769DCD7186BCFA88116B15
2E492C91707E66735C27732FD2858973F95DDEB9A4820FDA5D8827D5E74723E8
7B8E4DD13823274BFBB73F2EC89A011EA1613AF869004DA61EF8A559A2C55937
A77B9B07CC6B203717849E3B7332E4A994155949936F6FA5B2DFAE3590EC1EA9
FD0946D30F> |-
/a <1C60D8A8C9B7A73DCF7C2AED716C9FB9F2C5F5765BDDDBA9AAA6C6DA688A
E3B43BFC5C3CD8AA46A807D3C780CF35C2AD15D80A4A5C4756F057F86ADB638E
C548F8AFC239D8A489D427F0FB740C469771DAB6764AAF6FEC53E02EEB70C427
7CB42723D7F004947232DDE3F5CB53A21428567C29617B03B09B7E2F46F5EF00
617A2D589AE3BCB28457B36A1348E098999C979D66EE70896599AE3944CC5163
B05FFBE9E36E59F307770D> |-
/b <1C60D8A8C9B77914FEB927BD96B782FFF1C98B8746BBAF48B9FA8D891075
819C2DBFE795506403066496A3402FD8C696BF22014788435010CB8CED5FE817
A33100CFB200FCEE509EBD826624F96693B68714043C55C66DD49E4EC662B90B
0358F34C0FBF0EDCF581AD5E1521FF27B3334651B7174FB5A2D0166773EA68EA
969CABE4FA257FC8CEDBFBF090DB263F1C2C5309DD24AFDBCC47F93AF23115DB
C77ED518E1> |-
/c <1C60D8A8C9B77914FEB927B26FC5AAFCDD087820DA599F696A04AEEFE6A6
5E6334C6647B3A0667BC04D0A5C2BB8A95E659D3092F5AF3B58F041485CC5168
C00745895DE8CA04AED0A0D5196D28BD13AD3BD490AAA167EF7812C5B2195370
BB3E328B04CA8FF090A4AD00B8106D5A95EF7097C040C6F02397F76C> |-
/d <1C60D8A8C9B7A73DCF7C2AED716C9FB7770072075A6CB478F3EA795AA1E3
154A40B9E9E03E91CC2B620AC4A0EF46D53816F6DBBF2FD91209D8563CA4C418
AA92647CC0BFD7503B31B4BD157A4459433E9C1883477B18F416C78716C42A7A
0799988213430F50F59AE39388EB264809ED7A3C890EF185817E3087ECE79D57
B99D640376EE88E14846A70FCCBB1E2F2DF3AFF13D3DD30BA2FEDFC674B1F419
E9FB18483745853A2722BE4C41B664389ACC76A5E190371EED443C764D451A7F
7A584F07> |-
/e <1C60D8A8C9B77914FEB927B2ACDC0349B71D1BCFB38080E7B2053C913600
C6EA94F6F8D1C6647E800E555D12795112F1A7D98AB1492181555B4C05574E50
32472C5AA25F8431F7A4566FF8D67A814CE7A543A2DE857FD930ED57AC012E67
FB381FD938E18015CB49A044A33FF26623767F098B006F23> |-
/f <1C60D8A8C9B83E2DB5BE0B01B9B49DCF6848930187CAC3E816120CFF5B89
F4D12A6ADB0D4AB669E3F1B616BBFF58B1EC32C0118ECD5376005BFB34CFFA56
0175EA8033926F544C4C8D21CE72925C7055A05BB5631A4A001B2398D5BF6AE6
E48396A5C53611F8C5FD4DA9BD95600DA9B0ADBB9F311EC7D327CD86C6C68C4E
4ED0D3B1D9BA67A049B867F5220178AF29CA567B118D1088AE0F1E7294E52FEC
8D61A3029124F948F33B8662F2FBECF44C9CE02757B737> |-
/g <1C60D8A8C9B7791484A6A140918C202AFBC6471DF2EA51BA5F9D0C2CEE45
A64228E8DA83A4D7D5A6B1E9A927052DF0BBC9B177B941764150C540B093F5E2
206B6B4BD37BA1130240D1266BC985DC9B5FEB752F7C1F5684940C9B0D6602E8
0AA1B7C7A6E0F5B174099F5C83E8AD6B3391C1538BCE563D82B4655A518E28A1
8C2084AA5AE9838F0010819B9ED4838146B6D55628382C248FCA0145E8D850B0
D33235ED564E6500189BC55DA359C0> |-
/h <1C60D8A8C9B7A73DCF7C2AED716C9FB77700720780F6EAB3DB92A5BDE6EC
BEB89FC2F33895A692D484145D8EFC8B362905F96EBEF9C034A86DB94F215798
F6F73501AB192B03F6CAAD382F40E8EC55028BF622C841913046C0FB70A35631
11518D645E396DCB9EE116E2E0E4C16455356D7A84731C06412987956598DFCF
71C93050C40FBD0574C791844F11C991CAC82D7AB888CFE0860ABE117729EEA0
804BF5D8A994032D4E3F1E4F68F09CA00DAD5C807608CE814ADABB68194DB55E
5886> |-
/i <1C60D8A8C9B83E2DCF4AB84B956DF39099B1DABD765B83C25BE5CAE31BBB
6FE83E20DBD9BDFF92D3EF9039E33A3DC23626059240EC8BEC89241191F5BE97
D9D8688BFECEE33BC940E0D38BC30FC29D99988039CEC67D17A82162B1B47369
23F1E98D1224BDE977F2F62D0F312301E60F4A50B7E924E8657653CA1FE9004C
1C3D8F0A776AAF8C199C3FFE17295F9F8E5A762F18D23D2E092D5AE9CDDFAEE8
765DF107> |-
/j <1C60D8A8C9B83E2DB5BE0B01B9CC71CCB458AEC8ECDDCB7839C9CDC2AFF9
32EDE02E0152D72C5AF1F50BA6294C63D78B63DC06E386956B7D756ACBDCD462
7771DF165E842300F4ED8D5E23B45E91251FB3697DE3D2D51B3FE885DBA3225D
B8FA62CB4FA37F15D1923D3F95673D4B2B96433A59599D89CC0E2E63C1A48E1A
8E83845F78FD86DB4D15BA782FEE2337ABAACC0E6678D287F58A028BB015F61B
C71F> |-
/l <1C60D8A8C9B8707CAA1E7B7CB2A9BAA4E3703B081E815FBAAD5F96A5B6EC
35A8D515D2B955C8D4862E2C395E86B9FF55149B54144D7789267B4EC5427DF6
F0F01403A62FE9AF66DFD192B2169F019A8270A903268D91E50BEF4EE34F2622
808542C5D271AF28B3D13D0E0D9AAE4E7555B1F1DF97E80F7BF4115C0A34D495
FC9AA53E3D34B21D79> |-
/m <1C60D8A8C9B6D5A025707A299632BA7F04555B2429FB09760B3824EFF549
D8994D38220E5DD42F7FBAAF63F31CBA0F3BED09B2FCC6901851AB3A6151E5FA
D73805BB734EF84ECB5ED5FDB3684C971531BCB6D8A3DA82AF7C0250C843642D
76FF649DABFC3591749E2BCBE6ADC2259DF4F7B7963C9B21611EBBD9BCED7652
108B71772B704C6492A7649A645AC172325DF2118709C9CF816ED710CF6021FD
B92E935F7D969BDD85EBA2E8256B6219178C007DE7BE3652C017919E530C8AE5
78E9719C3D83765B863FD5760E5ECDFD5DEF66BEC02B02F332383B1E6328C7B0
1CE807FAB4442B3E3C5EB87C8B5D274743C0C4DE048CE5BB86F28AC74B91A436
15A3752AC0CDA51E43162D89> |-
/n <1C60D8A8C9B795A0C77E816305B21D0FCDE425912F223320336754F58320
CE54BD1BB10168744727D2300E83408AEECC67016E8B17D0D3CCF6B4177523B6
8BCA51DA8CA631A61C2B17A3C215F8A4996845A6B02328971C78CA1AC9B51E41
742F83B1D363B048FA97FE2B1D8F2D22445D610114ACA44CCAF3D14AB37860EE
EADC9EA061DD18E75CCAC69E6DF67F480F388A4D5D97622A954F65DAE373C8A0
D1CA4A0B96645B604A8AD1E3ABF9A19975DF45C8B7B1FE0F66F173446412B0C5
3CDF8474> |-
/o <1C60D8A8C9B7A73DCF7C2AED716C9FB9F0A4258CEE66FB2369599DEE3D8A
34466DA1B21C0357444D907155D53C875C3A77F8DF3E1BB35720A5059D61DE6A
9019FC7E8F1B2C343ACB2635D3B0ED682DC82C4E09ADC71EE16BCFCF6C4322D5
FFC1F8693AE5BD05690CEE> |-
/p <1C60D8A8C9B7A73DB5BAD3972AC8060F506161E8798CD4D9BAD89EA88086
15265E2702B0972DBFA618CC780D2FDB35874F36317296F67D9FA2447066C19E
EDA714D54FA70593495FD4D97309D6A71DA1FF4AA98F6E7FE988A760F234AD91
F623BBB9D765E6D08C8073A6865BAB9C5BB893D186341FB40793600031CA1789
F08AFD689B17EE9BD792C411C1B1A9DAA8ED2BA2B4B20F9EAFAB08B507937052
5E3BCFFA665568A0EB78130C4E1A11D5386208223345EB70043E4E7988CC7CA3
33CECDED144FFBB979E57702AA38C9C473EE9EE78B650D184E76EFEC6B9C5E15
E5C2B60A1075D9BCB4> |-
/r <1C60D8A8C9B71F8BAA796CF8CA92005223C2CA55D0AB4FDEFFB1DAAA8BFB
9CE9BE401E88E5A48DEDD0CBF54F71FA104572D82231C76605A284E324A92468
BD8573534468E74DD197250151047E072A75C5B0EE0250B5457E76687CD8935E
654DCFF693C9FEE47579E5622F24C4D35EE3B79030D4B27F68AA3265D92A4B8F
A8EA2E16813964F07CF5D1C45A536B5B5C42A99B5C89D6> |-
/s <1C60D8A8C9B70B6BCCA78330714747CAB013EA99896C1F0139CAD120BA6A
5F4D668D1D455F1CD5A986A82776A48A79B9D01570C35AAB7051B9A8AA8C4488
E1A0C3577E9F4082712B0B8219999535A47033B197BB73DEFD077DE04F72B9C6
F8CC3730FAEC17A47A9DDE4048C9308F2610A00C669888CAB85E23CFDCC94A7C
85D90ACA90A62400D22D3C7DE7800E07DE0182382A3F2F52CC242F> |-
/t <1C60D8A8C9B82799044A786AC7803B5988F6B119B8C656509A357C4ECAD5
EADF3B8C7A850BB45B01D25838E87F56A952E4252D7750CD6772631E593F4B54
CA4E5DC816CAFFF0151BC135D599D14DFEE7C9C74E2ADA5E55C92AC3052BB37C
7D5B42B1F9C16941FFF59B7FD921DFFEF6DE445377959C86A5ABD7EFB95708D6
33FE09AB6B0BF04836B8F7B2> |-
/u <1C60D8A8C9B78E0593526DCA6FE3E6CE0E8504A75EBE2B9E36852FC40261
21B579ABB78DD40630036CCFB28FE496D68EF7209860EE6024A060118C710C16
62230F10FE47A3004E1E958127615ED30C74ED48414C6FE9DFF372B62F64E9C8
D1AEEEF0EB6C2EC0E566CCEB1D39E35C38F971B9A709E537DCAE1719D33DEF5E
270404200558B5D90245AC73744F4799CD431981A1B390DC539E7003D1EBDB18
22D95D1049AB930664BAE8175178BDB7A5BC732BE42FB3D140797F729719A49F
0506BA143F832F5282> |-
/v <1C60D8A8C9B77914FEB927BD96B782F1A7875E2E7A9B3125C7503B215A34
4439F2A57EAD3C940783353E308AAFEEB838FAED8232F525A806A64A5677A4CD
7EEC2A4949AA1118299FF78B80617CA6D5E3309534A25D0F40603521F1B009EA
019BB9C30B8EFC4C41A4C8B2C53A48F42C97CAF4D0B5EBA5F77468BD9602136A
E4730A8483BC022520991132D0734A2B71792DAF> |-
/w <1C60D8A8C9B67F58373F10F589A421AA431367F27FCAF15B4BE4F4E01CB2
73E133CF52FB00AF71A72FE7D685AAC7A4760965F457DFC830BF025FAB8DA9BB
08B5F5DB0F9F1DDF120567249EF000198D844316AB7AC0F4E04D72932C873150
7D47C467A16B78896857748627B3E076AE97595636FB6447E17B83A896C0A5B5
5B4BF4868B81438FB5FE315B09A9E523AC5A44F6655A063A0FACD22DADEAA759
C766D223D5A52E4EAD3961EE7DA990E6378E594049BA63950FEBD68EC22C42FB
94AB5573B6CE6D28270CC0906E0B84C585E8DD191F68EFF7623DA5FDFCBAB004
E353B60FBDF2> |-
/y <1C60D8A8C9B7402F1814E39FDAE1C6DFF2AA1FD296F184AFEBB9D7C758E7
83493F7E200C355053D7EC8ED7DAA69AA3D90534142517D954123D3968DC1C2A
915EAE76D2D211874A20EF55F842099B8BE5BEECF8A33810F96D429A6308A539
01BD0084CF1E4B0C8B657D6DCB6A2296FDA85E4E0AB9C60CDE1934CF369E9ADB
7F5CE3F3147B1B62670F3DE46BDDF96AEA6F9CC2A8E0A9472F435ED554485A46
7CF754C9472B2EF961C2AF6ACF25F02DDE7EC5476F3B52363EC8A8FEAB0B46DE
C4425E51B5DB6C55> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ATVQUF+CMTI12 /PBAAAA+CMTI12 findfont ct_VMDictPut
/ATVQUF+CMTI12*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 20{/.notdef}rp 
/C /D /E 3{/.notdef}rp /I 7{/.notdef}rp /Q 5{/.notdef}rp 
/W 9{/.notdef}rp /a /b /c /d /e /f 
/g /h /i /j /.notdef /l /m /n 
/o /p /.notdef /r /s /t /u /v 
/w /.notdef /y 134{/.notdef}rp]
ATVQUF+CMTI12 nf
ATVQUF+CMTI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
41.6071 220.035 mo
(Invariantmass\(l.h.s.\)andrapidityseparationofthetwot)
[4.5601 6.60005 5.39998 6.00002 4.92004 3.60005 6.00002 6.60005 8.52 9.60007 6 4.79996 
9.59995 4.79996 3 3.60004 6.00003 3.60004 4.79996 3.60007 12 6 6.60007 10.6801 
4.31995 6.00003 6 3.60007 6 3.60004 3.84 10.4402 4.79996 5.39996 5.39999 6.00003 
4.31995 6.00003 3.83994 3.60007 6 11.3999 6 8.40005 3.83994 6.00003 10.1998 3.83997 
7.79996 10.7999 0 ]xsh
349.767 220.035 mo
(aggingjets\(r.h.s\))
[6 5.39999 5.39996 3.60001 6.60007 10.1998 3.60004 5.39996 3.83997 9.59979 4.79993 4.92004 
3.60004 6 3.60004 4.79993 0 ]xsh
-11.6719 234.435 mo
(fortheEW-induced\(redlines\)andQCD-induced\(bluelines\))
[3.60005 6.00002 11.0399 3.83998 6.00001 11.5201 7.91995 11.64 4.20007 3.60007 6.60004 6.00003 
6.23993 4.79999 4.79999 12.12 4.79993 4.31998 4.79997 12.1199 3 3.60004 6.60007 5.39996 
4.79996 10.8 6 6.60007 12.12 9 8.39996 8.88013 4.20007 3.60004 6.60004 6.00003 
6.2399 4.79993 4.79996 11.8801 4.79996 5.39996 3 6.23993 11.5201 3 3.60004 6.60007 
5.39996 4.79993 0 ]xsh
322.768 234.435 mo
(contributionsto)
[4.79996 6.00003 6.60004 3.83997 4.92004 3.60004 5.39996 6.23993 3.83994 3.60004 6 6.60007 
10.9201 3.83994 0 ]xsh
%ADOBeginSubsetFont: BBAAAA+CMMI12 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /BBAAAA+CMMI12 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMMI12.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 22 /mu put
dup 23 /nu put
dup 27 /sigma put
dup 58 /period put
dup 59 /comma put
dup 61 /slash put
dup 62 /greater put
dup 66 /B put
dup 77 /M put
dup 83 /S put
dup 86 /V put
dup 87 /W put
dup 101 /e put
dup 106 /j put
dup 112 /p put
dup 121 /y put
def
/FontBBox {-31 -250 1026 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 441 452 463 683 704] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [22] def
/StdVW [65] def
/StemSnapH [22 29] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/mu <1C60D8A8C9B7CEAE09C95C7D671BDB7A00D6066DD72F05A445B16DFF470
D955EBEF4CABBC29886504C0F82C5DD6D2433D7731827CD330A39FDB639CCB87
5D1F0D6D1E5231C2EFFDA1CE832DDF6019A77D032ECA43A1341120B8377319B7
2030F1B25943BAE2ED4A2428E73CB6809190CB8B96CB5FA873B75B7B152E54E9
782187992A72B1C1A3C693E96AC9701497E728FF7A6FF215D03FDD315F2B520F
F04945D480FE1332E5D1CBFA0DE96A6602E88B2525411BF9B82D9413F1A8823A
AFD00826974D33F7C53D326554D2206E1844D450C010B2807B003C89981A4833
5B01E941ECD> |-
/nu <1C60D8A8C9B758704CE17B3E96306C8B5A1F4AEA5F7B51335F5A7F694F1
217996654B79908047858672C15B20F8D17B300A5C9D8B474FF8F4170B875CDF
0E15A98980AB8BA738CBE362087216B8056EAD9DF76B2F3EB70BB0BDB0ABFCE3
6B87B31D2DB6086B4FE15C985939AF3294D7D5A36FC7C26740F> |-
/sigma <1C60D8A8C9B7EF325DF8874844E4C7D75602A5A8A07D6435EE8373AA
20759E5BCBE80F108764907E839B219AF2AE970927025F9606C2EF0E3FFA814A
0E63216983745E7839CEDEDFCFEBBFE2990A0139B06BCB0098CE9A3A564BD986
7E2F8FBFAAA57DF0B04C3373798CFB3A55> |-
/period <1C60D8A8C9B85D12B760F96B699981ADCC05D5F2AC0EA1A05113FD3
2301B2380F6511B97797896DB> |-
/comma <1C60D8A8C9B85D12C7267AF0D2F66AB4AC257C1635F0E44E779EA91D
17D919E74DC693733D9D0583EFC67F7F717AA0A2AD3E3A69370B6D8115F79AC7
377BB34BFA4D6C876CD381E28CBE6ED5880877DF601260E0> |-
/slash <1C60D8A8C9B752AB47E44573D7913AF39025896879091CA650E38EBD
380A0BB40FD4E12F5BF9BAAC6D121E7D007CA3AE5B7E99618A1DFCCD7AF05850
6E47DB90D668879256CD> |-
/greater <1C60D8A8C9B6EC3402A6B9BD6D872276897A6BF14DCE3028A5E621
D8F535F08A4BC9E726C879183BE402FB8DB018736BEB5898C44B712E4C4EA08E
4D3E33560255BBABE20507154EBFC2FDEE0027348C93F3FDEA61C864CEED0B93
FEAE> |-
/B <1C60D8A8C9B61AE93D50A7822DAD6DFCE6BD753D67E768A57FC7E2E3FCA5
2752F2BFF68097D0D4CDAE49368B18101A7D25237C99197CE2F9D793F33DEDEA
75C636105E60994FBA1AFB838B8191AB38BA1534F6055EB9F2076CBBDB7A1E7D
6B2D056D555E742968D2F189F5462BF20E3CD8EE1C338EADD707C568154A0729
9DCF932879CC7A18467541513DFBB60D38D72C47DC2AC476014158702C824854
7F26DEFE84973D2E987AECDF536B44D6B2CB4938BC285C71590F62B9E4514DB0
B57DE7452357E14842E39F2D6203BE04> |-
/M <1C60D8A8C9B5D51E1F988311E037AFC421742F7C35A54FC9332DACBC707C
7223086F8AA124CA8AE6F5728C024B0C3790CD9404A58ABD98931EA9562122BB
6792DFDCD0A04BAE5B548989B02665BEFD4F68C51D6EFD4B6B2D8EBE8CD2F529
02F7D67388C6E133940B485203CDEF094683083B71A8B7044D26CA9F06E77C5B
02FD6B9052F80EAC3123E9DA02637A0880BB9FB9952EB6B147D83D8D5E4FF5A6
028C8033046B0A0064070A5E3B3039458DE2B1135100945077BA60B5CF444632
300BE3ED7865F13425B4AE9B656AE73FA1D97F497F531CF2252004EC5A4F468B
75531861F05B36C43FE1E244AB98811282406AE43B5B86BE63A389> |-
/S <1C60D8A8C9B7C12ADCBB377749545B86EBBF23901708200F2DC2570D167F
EE1ABE95138FCBBE27C85CB85DB14BA7CED3D1A4D1CA18178EF5AD64DEFE23BD
733B86774D2079923A0EB65CC117EE09742DAC2834DE8ED884BD54CEAB86C93B
B61247AE42773370DEBE3F4B69A98BD8896415C4EEB5C396E543BCA111D7684B
1364DB1C3205496F94FE480075C156390BD25E0B95157D535D369F3B965A8D77
6A8DEFB9199C33094B1E36F05D80E38DD627BCD95ADB7021E4BB36EE5AB4129F
7260E7B7DBE6E132CC8D893E67309170010C7A4E85A46D9AFD40645CEF6787BC
EBF0D8172A0867> |-
/V <1C60D8A8C9B7E1F86555EA948B3923991EC2D773D3CA399D4DDD18C34098
4D23A877D0E6DACF5354C0BBF0194A98CBB4C7BEC53C0A5BD10249DC42DBC59F
AF1E36806BA66CD6C8AFD8C0519FBFE286251CAD47ECB01A39BAE5CFC439CC74
AB1271BBB5E4CF7EDF927F71AD5884B15F50391386DAA5AED7382EF043D5AB77
75D11E7DC199AEA81E798DECF3CF208AE4739F0D1240CE1577D1E6DAFB1D130A
BC95660F7D8E660AE4243AC55179D6733D289FFC9C170431FF> |-
/W <1C60D8A8C9B5A2FE06AB8C045E4F7690D78731652B5BEDBB9834BC8C07B2
A98ECAF54C257E30BB476833FB023CD03B509DB179F72DFA0986FBCD80F72EAE
407BB40860394854821B3F2D03E333FBCC3E3B96F907E35246435669202013F1
688EB8C4FC0717E097DD83A37390C346C56AF3FD60235A69F1EFF18D26D74DD4
ACAB5A5D5F664DEBC03BE9F77DA075150321F02A977196AAEBAD99126C069EF6
ECF3337D7A5D5F681C286F6F7A7DE295F4ED4F66B4EAF6CCC41B456C7DD70E7B
E964511F833D349614869BEC921F704FD99B6B0990C4A6427BDFF758CA116570
51DBAFA1F32455F817C27B57295F2374BEE844DF0A37AE40BF78F8DAFAC7C754
FCBBC6FA2292A4B8C376A2790F5234F4171F3C48> |-
/e <1C60D8A8C9B776A0159F5DF1A486F7707834F171F94A2A0DB9080E75A7F4
33602DCABC1A2FCAF65A89C65C910AFE8267F9D21614E5F78706D852351961B1
AEBBB3BFE4153BB93EBE60AF39D0D7F10F091F34A30A241D858FA3F189F88D9E
4B32CC50DCF90F52E567DF54BA6FFA8C5DFD85E585BE0B38D5085F818AA8> |-
/j <1C60D8A8C9B706531450AB347376B2268AF178549961B67CD144DB1EBC81
1BEB98DFA854EF3B933A2B064145330BDDE00A12487598DA610F913FAE183BED
E76238BE38951D92FD55388A0BD995B1F9F58158211EA87918252863FF7AD2FB
CDE28303257DE5CAFFB0A652129C2D67C65F29A88A65FB34E4C70568C74FC740
96D9E11F41652C3989ADCBD77F7A687CF1EAEBB1669229DAFD4D89B335B95C6F
D7D7C71D5B5A41BC38EFA1FF2E119553> |-
/p <1C60D8A8C9B75004259AB739F1393AB04A13EEFBB31C906E95F9335AA126
B35BEE315F52FC868B87050ADF35626ECBE7D8CF06DD795DD12854A4F13C84FC
6E2D8479B1970D28A57960B870ED47C430620DDE208CB682347FC8A4C01007B9
93C92D40EAB24672DDE79EE9B45A36D1481C36A9D007AD37CEC6285751654447
85DEAB72C039846DF63CEA930C7EC8ED33EFD0BF3873FDAADD7645BB21A0D01E
2F78E44F4C267B5256A31B7D3657BFE1F237282696D27F47A193EB5B8EE119BB
34C09CE36571E064EBA7F6128ACB1C3982684873862C90E81A4FC049EB> |-
/y <1C60D8A8C9B75E5E19D965DECC23FE1062E723A88107368B015E4FD9B9FD
E240C8E3FFBE938AFBD217C0F866F1A788787D9ABF45E5943F1B42D10BB1A8C9
EA544B2DBE01CBB0FB6462164709DE2E0AF832217A83F75C721587BD4620971B
0BB534203DECAB014A69E59D0E5DC4553C62EB82552E10D7BDEA7AF23CEF8174
F341FA4F6C95D158F162448F80322D854BE136D5B462D508299A0AC0AB61E900
12281620060E3C9180C88D4075FC1224C47F7EF402A25550A5214570CCBBD294
341706D96058B1CD007FABCC77259BC22655689E30A7D46F616C07108A0E7E81
E9098195D3CAC9FB638367AE54913B59AA03B771EC67AEC026BF1C1262F889CF
FF5E4DD8> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ATVQUG+CMMI12 /BBAAAA+CMMI12 findfont ct_VMDictPut
/ATVQUG+CMMI12*1 
[22{/.notdef}rp /mu /nu 3{/.notdef}rp /sigma 30{/.notdef}rp /period /comma 
/.notdef /slash /greater 3{/.notdef}rp /B 10{/.notdef}rp /M 5{/.notdef}rp 
/S 2{/.notdef}rp /V /W 13{/.notdef}rp /e 4{/.notdef}rp /j 
5{/.notdef}rp /p 8{/.notdef}rp /y 134{/.notdef}rp]
ATVQUG+CMMI12 nf
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
411.208 234.435 mo
(pp)
[5.87997 0 ]xsh
%ADOBeginSubsetFont: NAAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
ATVQTX+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/minus <1C60D8A8C9B6FC2D98F64FA8A84856380510A8B89CD4DE936C2002F9
CA66334C70459EFC1D8016D52F4ACC8D584A> |-
/bar <1C60D8A8C9B857441457E710B30AAAC225216DDD3F0F67D37AB5F17441
25AC44330DB61243F0DBA44459146B24E9B3E94009> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ATVQTX+CMSY10 /Encoding get
dup 32 /minus put
dup 106 /bar put
pop
%ADOEndSubsetFont
/ATVQTX+CMSY10*1 
[32{/.notdef}rp /minus /arrowright 72{/.notdef}rp /bar 149{/.notdef}rp]
ATVQTX+CMSY10 nf
ATVQTX+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
429.928 234.435 mo
(!)sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
-11.6718 248.835 mo
(\027)sh
%ADOBeginSubsetFont: SAAAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
ATVQUD+CMMI8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/mu <1C60D8A8C9B672D420A18B45CF9CD91BFFEF8A6FD990749ACB73A18C210
BFEA50BB50C0CD7B5E4E22B6BE0250959F787F0DC2DC8325858C079907763137
72969B7EDFF26CB692C2A5616F9A33E9EB334E3162A0EC7641412D2D5606C848
5F41190F19776986202E2E1E491EE887C2EE164B6CAB36370540634FEF3AB745
4EB0F6143CEB708F0D64BE8D41E8D0247494716DF468ED1E1AC3A3A1A6DC05F4
945FADCFCD2BB93A216FB5D5803DA0AD614B2BA28E0AE32AEA42F43ED4429A07
D3F308355862D63DDEC4ED2724D5450EDB700> |-
/B <1C60D8A8C9B6D4D2D01160D4E92E02B5EFF90BCCA0252F944ACF3AC2F0ED
DB7CDAA9CFEA8CC7E7B5F2070802A91C96A794B815697CD067EB55D8EF192EE7
3FEC53E8B79EB66296C826BD521F01543FCED77996F77BA2A09E49B8374A3F44
71EE9F94F587482E9EBE0E0952EE9FF5440F737E679B9F6AF536DAF1A8C6D016
80625C1E501FD599A6C6AD1C620B8D6C3ED10245319FC817A30A5B77C0AEEE16
18448788E2BC201B9A6BB5521B> |-
/S <1C60D8A8C9B67B16622634B63275053DA772F2C1C75434C0DC3B79FFABCA
A7F68BB7F56D09F3B176461CBBDA107DD304DCF3DF100EA3E78B6D6745FF63E9
8C3C609664364AF67D4753E8DC0FBE9021D970E81A3675A599CAE761F7B06F6D
2FFD4E06516175FA284F7F3F7B07C7E41177EBFAB600FF43A084F1A179C8057B
732D286285B6898D621B2167058603D5E2FEBA95F8D65D927A31993B89557787
E7920D58105E054DE084713CF2959C5EE906B7D2898DAE47C2A33E33080AA7F5
A6208ED19752BBDFCB0EA9BAADA25DAAB9510A111A8C1FFC0E5CCFB0FDE7257C
2FC5811C7CFEC05F4329F50D> |-
/e <1C60D8A8C9B7AFA9B6638211A1359585E7158D00AA3F25AAA8E1C85A5E0E
97D03697E0DB043B57C29719F2054BC5F418C8AE7008F77A0D45D2E9438411D6
4105ADC4E549F8B64B180A1DF55FDD3291560C8F1AC2714FB2CA8DF2EB08ABBE
A3BD8CE30171C020F23F14E3E25F1BFDEF6C190D0CCC0FB42F6B406058A9495F
47> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ATVQUD+CMMI8 /Encoding get
dup 22 /mu put
dup 66 /B put
dup 83 /S put
dup 101 /e put
pop
%ADOEndSubsetFont
/ATVQUD+CMMI8*1 
[22{/.notdef}rp /mu 43{/.notdef}rp /B 16{/.notdef}rp /S 17{/.notdef}rp /e 
4{/.notdef}rp /j 149{/.notdef}rp]
ATVQUD+CMMI8 nf
ATVQUD+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
-5.91202 250.635 mo
(e)sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
-1.47179 248.835 mo
(e)sh
%ADOBeginSubsetFont: ACAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
systemdict begin
ATVQUB+CMR8 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7883C47E9695A643EC7CDC9D492AB150D29B838BCDE5298
51B4F36139BB3C5556B7F7E4934494C8CA669B61323ACA68A6240E429D123FC3
286EBB7794C68A02175F48138D7512A6C24D04FF2F8E1915AEBF24AD4C9B5E65
2D787177BE307207126057745DD2D6A7D78294> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ATVQUB+CMR8 /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/ATVQUB+CMR8*1 
[43{/.notdef}rp /plus 5{/.notdef}rp /one /two 205{/.notdef}rp]
ATVQUB+CMR8 nf
ATVQUB+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf
3.92822 244.515 mo
(+)sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
11.0079 248.835 mo
(\027)sh
ATVQUD+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
16.7681 250.635 mo
(\026)sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
22.4079 248.835 mo
(\026)sh
ATVQUB+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf
29.488 244.515 mo
(+)sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
36.5681 248.835 mo
(jj)
[5.51992 0 ]xsh
ATVQUF+CMTI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
47.6079 248.835 mo
(,withoutanyselectioncuts.)
[7.68014 7.79994 3.60005 3.83998 6.00002 6.00002 6.23993 8.15985 6.00002 6.60005 9.72003 4.79993 
5.39997 3.00003 4.79996 5.39996 3.83997 3.60007 6 10.68 5.39996 6.23993 3.84 4.79996 
0 ]xsh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
-11.6718 284.115 mo
(\001)sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
-1.95192 284.115 mo
(y)sh
ATVQUD+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
3.80785 285.915 mo
(jj)
[3.96016 0 ]xsh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
17.2481 284.115 mo
(=5.Ontheotherhand,asteepriseoftheinvariantmassdistributio)
[14.2801 5.88 11.88 9.12003 11.5199 4.56006 6.48003 10.1998 5.88 4.56006 6.48001 5.15997 
9.60016 6.48005 5.88 6.47998 6.48001 8.64001 10.8 4.56003 4.56006 5.16003 5.15997 11.6401 
4.56009 3.23981 4.56003 10.3201 5.88 8.51996 4.56009 6.48001 10.3202 3.23981 6.12021 5.51999 
5.88004 4.56 3.23981 5.88 6.12012 9.6001 9.72003 5.88 4.56006 9.72009 6.47998 3.23981 
4.56 4.56012 4.56006 3.23981 6.48004 6.47998 4.56006 3.23981 0 ]xsh
390.449 284.115 mo
(ntowards)
[11.64 4.56009 5.52005 8.03989 5.87994 4.56009 6.48004 0 ]xsh
-11.672 298.515 mo
(smallvaluesof)
[4.56003 9.72005 5.88 3.23981 7.91975 5.52 5.88 3.23981 6.48002 5.15998 9.24005 5.88 
0 ]xsh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
69.2077 298.515 mo
(M)sh
ATVQUD+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
80.4878 300.315 mo
(jj)
[3.96016 0 ]xsh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
93.328 298.515 mo
(canbeobservedincaseoftheQCDinduced)
[5.15997 5.88 11.16 6.83984 9.83985 5.88004 6.48001 4.56 5.16 4.56006 5.7601 5.16 
11.2799 3.23981 11.16 5.16 5.88 4.56 9.83987 5.87997 8.15985 4.56006 6.48001 9.72015 
9.12006 8.40005 13.56 3.23981 6.48004 6.47998 6.48004 5.15997 5.16003 0 ]xsh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
331.048 298.515 mo
(W)sh
ATVQUB+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf
343.768 294.195 mo
(+)sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
350.848 298.515 mo
(W)sh
ATVQUB+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf
363.568 294.195 mo
(+)sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
370.648 298.515 mo
(jj)
[5.51993 0 ]xsh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
386.248 298.515 mo
(production)
[6.47998 4.56009 6.24008 6.47998 6.48004 5.16 4.56003 3.23981 5.88 0 ]xsh
-11.6716 313.035 mo
(process,wheretheVBScontributionisnolongerdominant.Suitable)
[6.48001 4.56007 6.24008 5.15998 5.15998 4.56003 4.56004 8.27975 8.40002 6.48003 5.15999 4.56006 
10.0801 4.56006 6.48003 9.95999 8.75995 8.27994 11.16 5.15997 5.88 6.12018 4.56009 4.56006 
3.23981 6.47998 6.48004 4.56006 3.23981 5.88 11.4 3.23981 9.24014 6.48001 10.6802 3.23981 
5.88 6.48001 5.88 5.16 9.24014 6.48001 5.88 9.72006 3.23981 6.48001 5.88 6.12 
4.56009 11.0398 6.48001 6.48001 3.23981 4.56006 5.87997 6.48004 3.23981 0 ]xsh
356.008 313.035 mo
(cutson)
[5.16 6.47998 4.56009 9.3602 5.87997 0 ]xsh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
398.729 313.035 mo
(M)sh
ATVQUD+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
410.008 314.835 mo
(jj)
[3.96014 0 ]xsh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
422.968 313.035 mo
(and)
[5.87997 6.48004 0 ]xsh
-11.6722 327.435 mo
(\001)sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
-1.9523 327.435 mo
(y)sh
ATVQUD+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
3.80747 329.235 mo
(jj)
[3.96016 0 ]xsh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
15.5677 327.435 mo
(diminishthesignalcrosssectiononlymarginally,atthesametimeremo)
[6.48 3.23981 9.72007 3.23981 6.48003 3.23981 4.56003 10.3201 4.56007 6.48001 8.75998 4.56003 
3.23982 5.87999 6.48001 5.88 6.8399 5.15999 4.56007 5.88001 4.56003 8.27988 4.56003 5.15997 
5.16 4.56006 3.23981 5.88 10.0799 5.88 6.48001 3.23981 9.83994 9.72006 5.88 4.56006 
5.87997 3.23981 6.48001 5.88 3.23981 3.23981 5.16016 6.83969 5.88 8.15991 4.56009 6.47998 
8.76001 4.56006 5.87997 9.72006 8.87985 4.56006 3.23981 9.72009 8.76004 4.56009 5.16 9.72003 
0 ]xsh
382.288 327.435 mo
(vingalarge)
[6.12012 3.23984 6.47998 9.59985 9.36014 3.23981 5.88 4.56003 5.88 0 ]xsh
-11.6713 341.835 mo
(fractionoftheQCD-inducedbackgroundcontribution.Indeed,b)
[3.59996 4.56007 5.88 5.15999 4.56007 3.23981 5.88 9.83994 5.88 6.9598 4.56007 6.48001 
8.64006 9.12004 8.40002 8.99995 3.96005 3.23981 6.48004 6.48001 6.48001 5.15999 5.16 9.95986 
6.48004 5.88 4.80014 6.12009 5.88 4.56006 5.88 6.48001 6.48001 10.0801 5.16 5.88 
6.12018 4.56006 4.56006 3.23981 6.47998 6.48001 4.56006 3.23981 5.88 6.48001 8.39993 4.19998 
6.48001 6.48001 5.16 5.16 6.47998 6.95975 0 ]xsh
317.729 341.835 mo
(yimposingthefollowing)
[9.6001 3.23981 9.72009 6.84 5.87997 4.56003 3.23981 6.48004 9.35992 4.56006 6.48001 8.64008 
3.59995 5.87997 3.23981 3.23981 5.52005 8.40002 3.23984 6.48001 0 ]xsh
-11.6713 356.355 mo
(process-speci\014cselectioncuts,)
[6.48001 4.56007 6.24008 5.15998 5.15998 4.56003 4.56004 3.96005 4.56003 6.84002 5.15998 5.15997 
3.23981 6.48003 9.36 4.56003 5.15997 3.23981 5.15999 5.15999 4.56009 3.23981 5.87999 10.56 
5.15997 6.47999 4.56009 4.56003 0 ]xsh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
85.8885 382.755 mo
(M)sh
ATVQUD+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
97.1686 384.555 mo
(jj)
[3.96016 0 ]xsh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
108.808 382.755 mo
(>)sh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
121.169 382.755 mo
(500GeV)
[5.88 5.88001 9.72009 9.24008 5.16 0 ]xsh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
167.969 382.755 mo
(;)sh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
220.049 382.755 mo
(\001)sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
229.769 382.755 mo
(y)sh
ATVQUD+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
235.529 384.555 mo
(jj)
[3.96014 0 ]xsh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
247.049 382.755 mo
(=)sh
ATVQTX+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
259.529 382.755 mo
(j)sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
262.889 382.755 mo
(y)sh
ATVQUD+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
268.649 384.555 mo
(j)sh
%ADOBeginSubsetFont: TBAAAA+CMR6 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TBAAAA+CMR6 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMR6.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
def
/FontBBox {0 -139 855 665} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-21 0 431 446 665 675 683 704] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [39] def
/StdVW [83] def
/StemSnapH [32 39] def
/StemSnapV [83 100] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/one <1C60D8A8C9B7D8BE6A6D108299748564B8AA7FDE972DFCEF4C94952114
EFA32AA147A324B4F97380434F467992105F86859DCCB242ACAEFFBF289D2510
89988A8E9A15C68535D9ED43ED7C37BA2DB5423BD0773F871430F8CC8CC4764E
C9DAE6E7AC3236A301A264A25A5937BE1B9CE2> |-
/two <1C60D8A8C9B7D8BE6A3AF0AE9C7D4FBA9B02864DF6BF344A2B6AA1A0A5
9286E6B7771F2FC88421A5248A8C846419F71339C984DF7E348B670629B7028B
0F9DE040824CA29E10463F273189D206A5982689C7CF46D51581C07378971555
299A4D6CA2BF5F8B3A1779477867A0C854185A470AB8E95D5834103D8330B7F8
603A5960C705F2A1C74C> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ATVQUH+CMR6 /TBAAAA+CMR6 findfont ct_VMDictPut
/ATVQUH+CMR6*1 
[49{/.notdef}rp /one /two 205{/.notdef}rp]
ATVQUH+CMR6 nf
ATVQUH+CMR6*1 [5.97758 0 0 -5.97758 0 0 ]msf
272.129 385.635 mo
(1)sh
ATVQTX+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
279.329 382.755 mo
( )sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
291.209 382.755 mo
(y)sh
ATVQUD+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
296.969 384.555 mo
(j)sh
ATVQUH+CMR6*1 [5.97758 0 0 -5.97758 0 0 ]msf
300.449 385.635 mo
(2)sh
ATVQTX+CMSY10*1 [11.9552 0 0 -11.9552 0 0 ]msf
305.008 382.755 mo
(j)sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
311.608 382.755 mo
(>)sh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
324.089 382.755 mo
(1)sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
329.969 382.755 mo
(:)sh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
333.208 382.755 mo
(5)sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
341.128 382.755 mo
(;)sh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
421.048 382.755 mo
(\(24\))
[4.56009 5.87994 5.88 0 ]xsh
-11.6717 409.155 mo
(inadditiontothegenericcutsofEqs.\(11\){\(14\)weobtaincrossse)
[3.23981 10.0799 5.88 6.48 6.48001 3.23981 4.56008 3.23981 5.87999 10.0799 4.56006 9.47984 
4.56007 6.48001 8.87991 5.87999 5.15999 6.48001 5.15997 4.56009 3.23981 8.88014 5.15999 6.47999 
4.56009 8.28012 5.88 7.20004 7.92004 6.12006 4.56006 6.95999 4.56006 5.88 5.88 4.56006 
5.88 4.56006 5.88 5.75983 8.16022 8.03992 8.88004 5.88 6.48001 4.56006 5.88 3.23981 
10.08 5.16 4.56006 5.88 4.56003 8.27988 4.56006 0 ]xsh
326.248 409.155 mo
(ctionsof)
[5.16 4.56009 3.23981 5.88 6.47998 8.3999 5.87997 0 ]xsh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
373.048 409.155 mo
(\033)sh
ATVQUD+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
379.649 410.955 mo
(S)sh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
389.008 409.155 mo
(=49)
[12.4801 5.87997 0 ]xsh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
413.249 409.155 mo
(:)sh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
416.488 409.155 mo
(34fb)
[5.87997 9.35983 3.59995 0 ]xsh
-11.6716 423.555 mo
(forthesignalprocessand)
[3.59996 5.88 8.40016 4.56007 6.48001 9.12015 4.56003 3.23981 5.87999 6.48002 5.88 7.31999 
6.48001 4.56007 6.24007 5.15997 5.16 4.56001 8.63997 5.87999 6.48 0 ]xsh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
123.328 423.555 mo
(\033)sh
ATVQUD+CMMI8*1 [7.97011 0 0 -7.97011 0 0 ]msf
129.928 425.355 mo
(B)sh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
140.608 423.555 mo
(=1)
[12.4801 0 ]xsh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
158.968 423.555 mo
(:)sh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
162.208 423.555 mo
(68fbforthebackgroundprocess,resultinginthe)
[5.88 9.72003 3.59998 10.4399 3.59998 5.88 8.40015 4.56006 6.48001 9.24008 6.48004 5.88 
4.80014 6.12009 5.88 4.56006 5.88 6.48001 6.48001 10.5602 6.48004 4.56006 6.24011 5.15997 
5.16 4.56003 4.56 7.32001 4.56009 5.16 4.56 6.48004 3.23981 4.56006 3.23981 6.48001 
9.95987 3.23981 10.4401 4.56006 6.47998 0 ]xsh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
419.249 423.555 mo
(S=B)
[7.20007 5.87994 0 ]xsh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
-11.6712 438.075 mo
(ratioofabout30,similartowhatwasreportedin[33]forthecaseof)
[4.56007 5.88 4.56008 3.23981 9.59985 5.88 7.4399 5.88 6.83994 5.88 6.48 8.40024 
5.87999 5.88 7.07965 4.56003 3.23982 9.72005 3.23981 3.23982 5.87999 8.52008 4.56006 9.7201 
8.40002 6.48004 5.88 8.40021 8.03989 5.88 8.52005 4.56006 5.15997 6.84021 5.88 4.56003 
4.56006 5.16 10.44 3.23981 10.3202 3.23981 5.88 5.88 7.07993 3.59998 5.88 8.40015 
4.56009 6.47998 8.99985 5.16 5.87997 4.56006 9.11993 5.87994 0 ]xsh
344.849 438.075 mo
(theLHCoperating)
[4.56009 6.47998 9.12018 7.31998 8.75989 12.3599 5.87994 6.83997 5.16 4.56006 5.87997 4.56006 
3.23981 6.48004 0 ]xsh
-11.6712 452.475 mo
(at7TeV.Figure3showstheinvariantmassandrapidityseparationo)
[5.88 9.12009 10.4399 7.43988 5.15997 8.75994 7.91967 7.68011 3.23982 5.87999 6.48001 4.56007 
9.84045 10.4398 4.56003 6.48003 5.52014 8.40002 9.3602 4.56008 6.47998 9.84009 3.23984 6.12018 
5.51999 5.88 4.56006 3.23984 5.87997 6.12012 9.2399 9.72009 5.88 4.56003 9.24002 5.88 
6.48004 11.04 4.56006 5.87997 6.48001 3.23981 6.48001 3.23981 4.20013 10.92 4.56003 5.16 
6.48001 5.88 4.56003 5.88 4.56009 3.23981 5.87994 11.1602 0 ]xsh
357.209 452.475 mo
(fthetaggingjet)
[8.15982 4.56006 6.48001 9.84009 4.56009 5.87994 5.88 5.87997 3.23981 6.48004 10.3198 3.59995 
5.16003 0 ]xsh
-11.6712 466.875 mo
(systemwithintheselectioncutsofEqs.\(11\){\(14\)andEq.\(24\).)
[4.56003 6.12009 4.56003 4.56007 5.15998 13.8002 8.40003 3.23981 4.56006 6.48001 3.23981 10.5601 
4.56006 6.48001 9.12015 4.56003 5.15997 3.23982 5.15999 5.15997 4.56009 3.23981 5.88 10.5599 
5.16003 6.47998 4.56009 8.51996 5.88 7.55981 7.92004 6.12009 4.56006 7.19983 4.56006 5.88 
5.88 4.56006 5.87997 4.56009 5.88 5.75983 8.52002 5.88 6.48001 10.3201 7.92004 6.12009 
7.31998 4.56006 5.88 5.76025 4.56006 0 ]xsh
5.84866 481.395 mo
(Newphysicsintheweaksectorisexpectedtoa\013ectnotonlythesha)
[8.75995 5.15998 11.6402 6.48001 6.12001 6.12009 4.56004 3.23981 5.15999 8.03995 3.23982 9.59987 
4.56006 6.48001 8.39984 8.03987 5.15999 5.87999 9.3601 4.56003 5.16 5.16 4.56003 5.88 
7.80002 3.23981 7.7999 5.16 6.12009 6.83994 5.15997 5.16 4.56009 5.15997 9.84009 4.56009 
9.00015 5.88 6.84 5.16 5.15997 7.68002 6.48001 5.88 7.6799 5.88 6.48001 3.23984 
9.36023 4.56006 6.48001 8.27994 4.56006 6.47998 0 ]xsh
349.528 481.395 mo
(peofdistributions)
[6.84015 8.40002 5.87994 6.71997 6.47998 3.23984 4.55997 4.56009 4.56009 3.23981 6.48004 6.47998 
4.56009 3.23981 5.87997 6.48004 0 ]xsh
-11.6714 495.795 mo
(relatedtotheweakbosonsin)
[4.56007 5.15999 3.23981 5.88 4.56007 5.15998 11.1599 4.56006 10.5599 4.56007 6.48003 9.84006 
8.03989 5.15997 5.88 10.9203 6.83984 5.88 4.56003 5.87997 6.48003 9.23989 3.23981 0 
]xsh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
147.329 495.795 mo
(VVjj)
[9.48016 9.36026 5.51993 0 ]xsh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
181.889 495.795 mo
(processes,butalsodi\013erentialdistributionsofthe)
[6.48001 4.56006 6.24008 5.16 5.16 4.56003 4.56003 5.16 4.56 8.27969 6.48001 6.48001 
9.24005 5.88004 3.23981 4.56003 10.5599 6.48001 3.23981 6.84006 5.15997 4.56006 5.16 6.12018 
4.56009 3.23981 5.87994 8.03973 6.47998 3.23984 4.55997 4.56009 4.56009 3.23981 6.48004 6.47998 
4.56009 3.23981 5.87997 6.48004 9.47986 5.87994 8.15985 4.56006 6.47998 0 ]xsh
-11.6712 510.195 mo
(taggingjetsthatarethetell-talesignatureofVBSreactionsatha)
[4.56007 5.88 5.88 5.87999 3.23981 6.48001 11.3999 3.59996 5.15999 4.56006 10.3199 4.56006 
6.48001 5.87999 10.2 5.87999 4.56006 10.7999 4.56007 6.48001 10.7999 4.56008 5.15997 3.23984 
3.23981 3.96005 4.56006 5.88 3.23981 10.9202 4.56003 3.23984 5.88 6.47998 5.88 4.56006 
6.48001 4.56003 10.7999 5.88 9.2399 8.75995 8.27991 12.2401 4.56009 5.15997 5.88 5.16 
4.56006 3.23981 5.88 6.48001 10.2 5.88 10.2002 6.47998 0 ]xsh
346.648 510.195 mo
(droncolliders.In)
[6.47998 4.56009 5.87997 12.1201 5.16 5.87994 3.23981 3.23981 3.23984 6.47998 5.16 4.56009 
4.56003 13.9197 4.20001 0 ]xsh
-11.6712 524.715 mo
(particularthetailsofinvariant-massandtransverse-momentumd)
[6.48001 5.87999 4.56007 4.56007 3.23981 5.15999 6.48001 3.23981 5.87999 10.2002 4.56006 6.48003 
10.7998 4.56006 5.88 3.23981 3.23981 10.2 5.87999 9.23988 3.23981 6.12016 5.52002 5.88 
4.56006 3.23981 5.87997 6.12012 4.56009 3.96002 9.72006 5.88 4.56003 10.32 5.88 6.48001 
12.1201 4.56006 4.56006 5.88 6.47998 4.56006 5.76007 5.16003 4.56003 4.56006 5.15997 3.96008 
9.72003 5.88 9.72006 5.16 6.12 4.56009 6.47998 15.7201 0 ]xsh
337.169 524.715 mo
(istributionsof\014nal-)
[3.23981 4.56 4.56006 4.56009 3.23981 6.48004 6.48001 4.56006 3.23984 5.87994 6.48004 10.3201 
5.87994 9.2399 6.48001 6.48004 5.87994 3.23981 0 ]xsh
-11.6712 539.115 mo
(stateleptonsandtaggingjetsaresensitivetophysicsbeyondthe)
[4.56003 4.56007 5.88 4.56007 10.5599 3.23981 5.15998 6.48 4.56008 5.87998 6.48003 9.96019 
5.88 6.48001 11.8799 4.56007 5.87997 5.87999 5.87999 3.23981 6.48001 11.1601 3.59995 5.16003 
4.56006 9.96011 5.88 4.56003 10.4401 4.56006 5.15997 6.48001 4.56006 3.23981 4.56006 3.23981 
5.76025 10.9199 4.56006 11.1599 6.48001 6.12 6.12012 4.56003 3.23981 5.16003 10.2001 6.83987 
5.16 5.75998 5.88 6.48001 12.0002 4.56006 6.47998 0 ]xsh
341.489 539.115 mo
(SM\(BSM\).Atthe)
[6.47998 16.0803 4.56006 8.27994 6.48004 10.6801 4.56009 8.63983 8.39993 9.96024 4.56006 6.47998 
0 ]xsh
-11.6712 553.635 mo
(FCC,suchobservablesareaccessibleuptomuchhigherscalesthan)
[7.32004 8.40003 8.40003 8.51976 4.56002 6.48002 4.79982 11.7602 5.88 6.48 4.56003 5.15999 
4.56007 5.52023 5.88 6.48001 3.23981 5.16 9.95996 5.87999 4.56007 10.1998 5.88 5.15997 
5.16 5.16 4.56003 4.56003 3.23981 6.48004 3.23981 10.68 6.48001 11.64 4.56009 11.04 
9.36023 6.48004 4.80005 11.7602 6.48001 3.23981 5.88 6.48001 5.16 9.84018 4.56003 5.16 
5.88 3.23981 5.16 9.83987 4.56006 6.48001 5.88 0 ]xsh
351.809 553.635 mo
(attheLHC.Our)
[5.87997 9.60016 4.56009 6.47998 10.4401 7.31998 8.75992 8.40002 8.3999 9.12003 6.48001 0 
]xsh
-11.6712 568.035 mo
(studyin[15]revealed,forinstance,thatevenatscalesfarabove)
[4.56003 4.56007 6.48001 6.48 11.04 3.23981 11.2799 3.23982 5.87999 5.87999 8.03967 4.56006 
5.15997 5.76018 5.15999 5.87997 3.23982 5.15999 6.48001 8.51968 3.59996 5.87997 9.24002 3.2398 
6.48004 4.56003 4.56003 5.88 6.48004 5.15997 5.16 8.51968 4.56009 6.47998 5.88 9.24023 
5.16003 5.75998 5.16 11.5201 5.88 9.35992 4.56006 5.15997 5.88 3.23981 5.16 9.48013 
3.59998 5.88 9.35992 5.88 6.83994 5.5199 5.76025 0 ]xsh
333.088 568.035 mo
(1TeV,severalsignal)
[10.5602 7.43988 5.16 8.75995 8.15991 4.56003 5.16 5.76016 5.16 4.56009 5.87994 8.27991 
4.56006 3.23981 5.87994 6.48004 5.87994 0 ]xsh
-11.6712 582.435 mo
(eventsaretobeexpectedforanintegratedluminosityof30fb)
[5.15998 5.76002 5.15998 6.12009 4.56007 10.44 5.88 4.56006 10.9202 4.56006 11.5201 6.83987 
10.8 5.15999 6.12009 6.83994 5.15999 5.15999 4.56007 5.15999 12.36 3.59995 5.88 10.2002 
5.88 12.24 3.23981 6.12021 4.56006 5.15997 5.88 4.56006 5.88 4.56006 5.15997 12.2401 
3.23981 6.48004 9.72003 3.23984 6.47998 5.88 4.56003 3.23984 4.19992 12.0001 5.88 9.2399 
5.88 11.52 3.60001 0 ]xsh
%ADOBeginSubsetFont: KBAAAA+CMSY8 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /KBAAAA+CMSY8 def
/FontInfo 6 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMSY8.) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /minus put
def
/FontBBox {0 -215 766 704} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-24 0 683 704] def
/OtherBlues [-138 -126] def
/StdHW [46] def
/StdVW [46] def
/StemSnapH [46 64] def
/StemSnapV [46 64] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/minus <1C60D8A8C9B6AF0419502F0B46EFB77EC38C01C2E25D7B0EA3983642
6B430D970F7BA4890A3369B5894E1D421F84> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ATVQUI+CMSY8 /KBAAAA+CMSY8 findfont ct_VMDictPut
/ATVQUI+CMSY8*1 
[32{/.notdef}rp /minus 223{/.notdef}rp]
ATVQUI+CMSY8 nf
ATVQUI+CMSY8*1 [7.97011 0 0 -7.97011 0 0 ]msf
327.929 578.115 mo
( )sh
ATVQUB+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf
334.529 578.115 mo
(1)sh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
339.209 582.435 mo
(.Inthe)
[13.7999 4.19998 12.1199 4.56009 6.47998 0 ]xsh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
391.289 582.435 mo
(W)sh
ATVQUB+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf
404.009 578.115 mo
(+)sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
411.089 582.435 mo
(W)sh
ATVQUB+CMR8*1 [7.97011 0 0 -7.97011 0 0 ]msf
423.809 578.115 mo
(+)sh
ATVQUG+CMMI12*1 [11.9552 0 0 -11.9552 0 0 ]msf
430.769 582.435 mo
(jj)
[5.5199 0 ]xsh
ATVQUE+CMR12*1 [11.9552 0 0 -11.9552 0 0 ]msf
-11.6713 596.955 mo
(channel,afterVBS-speci\014cselectioncutsareappliedtheQCDback)
[4.79998 6.48001 5.88 6.48 6.48001 5.15998 3.23981 7.19975 5.88 3.59995 4.56007 5.15999 
8.16022 8.75995 8.27994 6.48 3.96005 4.56004 6.84009 5.15997 5.15999 3.23982 6.48001 9.12016 
4.56003 5.15997 3.23984 5.15997 5.16 4.56006 3.23981 5.88 10.3201 5.16 6.47998 4.56009 
8.40005 5.88 4.56003 8.87994 5.88 6.48001 6.47998 3.23981 3.23984 5.16 10.32 4.56006 
6.48001 8.87991 9.12006 8.40005 12.7198 6.48001 5.88 4.80014 0 ]xsh
334.889 596.955 mo
(groundcontributions)
[5.87997 4.56006 5.87997 6.48004 6.47998 10.3199 5.16 5.87997 6.12018 4.56006 4.56009 3.23981 
6.48001 6.48004 4.56003 3.23981 5.87997 6.47998 0 ]xsh
-11.6713 611.355 mo
(amounttoonlyabout3%oftheEWsignalandthushavelittleimpacton)
[5.88 9.72005 5.88 6.48001 6.12009 9.00008 4.56007 10.2001 5.88 6.48 3.23982 10.6802 
5.87999 6.83994 5.87999 6.48001 8.87994 5.87997 14.1599 5.88 7.91998 4.56009 6.47998 9.59985 
7.92004 16.5601 4.56003 3.23984 5.88 6.48001 5.87997 7.67978 5.88 6.47998 10.9201 4.56006 
6.12009 6.48001 9.12003 6.48001 5.51999 5.76025 9.71994 3.23981 3.23981 4.56006 4.56006 3.23981 
9.59985 3.23981 9.72009 6.47998 5.88 5.15997 9.00015 5.87997 0 ]xsh
380.849 611.355 mo
(therelevant)
[4.56009 6.47998 9.59985 4.56009 5.16 3.23981 5.16 5.51993 5.87997 6.12003 0 ]xsh
-11.6713 625.755 mo
(distributions,aswedemonstrateexplicitlyforselectedobservable)
[6.48001 3.23981 4.56003 4.56007 4.56007 3.23981 6.48001 6.48001 4.56007 3.23981 5.87999 6.48001 
4.56003 8.15991 5.87999 9.12004 8.03987 9.96014 6.48003 5.15999 9.72005 5.87999 6.48 4.56004 
4.56006 4.56006 5.88 4.56006 9.84009 5.16 6.12009 6.48004 3.23981 3.23981 5.16003 3.23981 
4.56006 3.23981 10.9203 3.59998 5.88 9.12006 4.56006 5.15997 3.23981 5.16 5.16 4.56003 
5.16003 11.2801 5.88 6.48001 4.56003 5.16 4.56003 5.52026 5.88 6.48001 3.23981 0 
]xsh
328.65 625.755 mo
(s:Figure4showsthe)
[4.56009 10.0798 7.68008 3.23981 5.87997 6.47998 4.56009 9.71939 10.4398 4.56006 6.47998 5.52014 
8.40005 9.3602 4.56006 6.47998 0 ]xsh
-11.6713 640.275 mo
(transverse-momentumandtherapiditydistributionsoftheharde)
[4.56007 4.56008 5.88 6.48 4.56003 5.76009 5.15998 4.56006 4.56004 5.15998 3.96005 9.72005 
5.88 9.72005 5.15999 6.12001 4.56007 6.48001 15.7201 5.87999 6.48001 12.0002 4.56009 6.47998 
10.7999 4.56009 5.87997 6.48004 3.23981 6.48001 3.23981 4.20013 11.8802 6.48001 3.23981 4.56006 
4.56006 4.56006 3.23981 6.48001 6.48001 4.56006 3.23981 5.88 6.47998 10.3202 5.88 9.11996 
4.56009 6.47998 10.7999 6.48001 5.88 4.56006 6.48001 0 ]xsh
334.529 640.275 mo
(sttaggingjet,while)
[4.56003 10.2 4.56009 5.87997 5.88 5.87994 3.23981 6.48004 11.3999 3.59998 5.15997 4.56009 
9.23984 8.40002 6.47998 3.23984 3.23978 0 ]xsh
212.129 672.315 mo
(9)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/ATVQUI+CMSY8*1 uf
/ATVQUI+CMSY8 uf
/KBAAAA+CMSY8 uf
/ATVQUB+CMR8*1 uf
/ATVQUB+CMR8 uf
/ACAAAA+CMR8 uf
/ATVQUH+CMR6*1 uf
/ATVQUH+CMR6 uf
/TBAAAA+CMR6 uf
/ATVQUE+CMR12*1 uf
/ATVQUE+CMR12 uf
/WBAAAA+CMR12 uf
/ATVQUA+CMMI7*1 uf
/ATVQUA+CMMI7 uf
/GBAAAA+CMMI7 uf
/ATVQUG+CMMI12*1 uf
/ATVQUG+CMMI12 uf
/BBAAAA+CMMI12 uf
/ATVQUF+CMTI12*1 uf
/ATVQUF+CMTI12 uf
/PBAAAA+CMTI12 uf
/ATVQUC+CMEX10*1 uf
/ATVQUC+CMEX10 uf
/XAAAAA+CMEX10 uf
/ATVQUD+CMMI8*1 uf
/ATVQUD+CMMI8 uf
/SAAAAA+CMMI8 uf
/ATVQTX+CMSY10*1 uf
/ATVQTX+CMSY10 uf
/NAAAAA+CMSY10 uf
/ATVQTW+CMR10*1 uf
/ATVQTW+CMR10 uf
/ECAAAA+CMR10 uf
/ATVQTY+CMMI10*1 uf
/ATVQTY+CMMI10 uf
/JAAAAA+CMMI10 uf
/ATVQTZ+CMR7*1 uf
/ATVQTZ+CMR7 uf
/ICAAAA+CMR7 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
